[{"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\index.js":"1","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\App.js":"2","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\reportWebVitals.js":"3","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\signing.js":"4","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\AppContext.js":"5","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\login.js":"6","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\Masterdata.js":"7","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Home.js":"8","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\Footer.js":"9","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Popup.js":"10","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\MasterDataForm.js":"11","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\ConfirmDialogue.js":"12","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Api\\api.js":"13","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\UseTable.js":"14","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\Controls.js":"15","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\Notifications.js":"16","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\UseForm.js":"17","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\NavBar\\Header.js":"18","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\TrafoShutdown.js":"19","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\LoadSheddingArchive.js":"20","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\services\\auth-header.js":"21","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\LoadingControl.js":"22","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\TrafoShutdownForm.js":"23","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\ActionButton.js":"24","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\Select.js":"25","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\Button.js":"26","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\MasterDataArchive.js":"27","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\DatePicker.js":"28","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\Input.js":"29","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\NavBar\\Navbar.js":"30","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\history.js":"31","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\Loadshedding.js":"32","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\LoadSheddingForm.js":"33"},{"size":512,"mtime":1614921578473,"results":"34","hashOfConfig":"35"},{"size":591,"mtime":1615447536346,"results":"36","hashOfConfig":"35"},{"size":375,"mtime":1614921578487,"results":"37","hashOfConfig":"35"},{"size":1573,"mtime":1614921578511,"results":"38","hashOfConfig":"35"},{"size":121,"mtime":1615447745015,"results":"39","hashOfConfig":"35"},{"size":5840,"mtime":1615447469154,"results":"40","hashOfConfig":"35"},{"size":15968,"mtime":1615457910128,"results":"41","hashOfConfig":"35"},{"size":1794,"mtime":1615447940109,"results":"42","hashOfConfig":"35"},{"size":561,"mtime":1614941834835,"results":"43","hashOfConfig":"35"},{"size":1359,"mtime":1614921578407,"results":"44","hashOfConfig":"35"},{"size":22696,"mtime":1615457876968,"results":"45","hashOfConfig":"35"},{"size":2286,"mtime":1614921578308,"results":"46","hashOfConfig":"35"},{"size":11487,"mtime":1615447716636,"results":"47","hashOfConfig":"35"},{"size":4785,"mtime":1615268257321,"results":"48","hashOfConfig":"35"},{"size":378,"mtime":1615268952057,"results":"49","hashOfConfig":"35"},{"size":874,"mtime":1615268257298,"results":"50","hashOfConfig":"35"},{"size":901,"mtime":1614921578414,"results":"51","hashOfConfig":"35"},{"size":2375,"mtime":1615448007049,"results":"52","hashOfConfig":"35"},{"size":8095,"mtime":1614921578389,"results":"53","hashOfConfig":"35"},{"size":6866,"mtime":1615785489797,"results":"54","hashOfConfig":"35"},{"size":331,"mtime":1614921578491,"results":"55","hashOfConfig":"35"},{"size":516,"mtime":1615447760473,"results":"56","hashOfConfig":"35"},{"size":6498,"mtime":1615449722675,"results":"57","hashOfConfig":"35"},{"size":809,"mtime":1614921578301,"results":"58","hashOfConfig":"35"},{"size":1731,"mtime":1615447824895,"results":"59","hashOfConfig":"35"},{"size":835,"mtime":1614921578304,"results":"60","hashOfConfig":"35"},{"size":8071,"mtime":1615283073955,"results":"61","hashOfConfig":"35"},{"size":766,"mtime":1614921578314,"results":"62","hashOfConfig":"35"},{"size":568,"mtime":1614921578317,"results":"63","hashOfConfig":"35"},{"size":1919,"mtime":1615448024702,"results":"64","hashOfConfig":"35"},{"size":86,"mtime":1614921578463,"results":"65","hashOfConfig":"35"},{"size":11914,"mtime":1615442038455,"results":"66","hashOfConfig":"35"},{"size":12475,"mtime":1615457570975,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1jf69s6",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"70"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"70"},"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\index.js",[],["146","147"],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\App.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\reportWebVitals.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\signing.js",["148","149"],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\AppContext.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\login.js",["150","151","152","153"],"import React, { useContext, useState } from 'react'\r\n\r\nimport { Grid, Paper, Avatar, TextField, Button, Link, Box, Snackbar  } from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\n\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {VerfiyLogin}  from \"../Components/Api/api\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Home from '../Home';\r\nimport { Controls } from \"../Components/Controls/Controls\";\r\nimport isAuthContext from \"../Components/AppContext\"\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Footer from './Pages/Footer';\r\nimport TrafoShutdown from './Pages/TrafoShutdown';\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n \r\n}));\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function Login() {\r\n let isAuth = useContext(isAuthContext);\r\n  const [state, setState] = useState({\r\n    isLoading : false,\r\n    vertical : 'bottom',\r\n    horizontal: 'center',\r\n    isOpen : false,\r\n    \r\n\r\n  });\r\n  //const [isLoading, setLoading] = useState();\r\n  //const [open, setOpen] = useState(false);\r\n  const Verifylogin = async e => {\r\n    e.preventDefault();\r\n    console.log(\"Login Button Clicked\");\r\n     \r\n\r\n    try {\r\n      console.log(\"in Try Block\"); \r\n      //setLoading('loading');\r\n      setState ({ isLoading:true});\r\n    \r\n      let isSucess = await    VerfiyLogin(username, password);\r\n      \r\n      console.log(\"Executed this line\")\r\n      //setLoading('');\r\n      setState ({isLoading:false});\r\n      if(isSucess)\r\n      {\r\n        isAuth[1](true)\r\n      }\r\n      else\r\n      {\r\n        setState ({...state, isOpen:true});\r\n        isAuth[1](false)\r\n      }\r\n     \r\n     \r\n      \r\n    \r\n    \r\n    }\r\n\r\n    \r\n    catch (error) {\r\n     // setOpen(true);\r\n      //setLoading();\r\n      setState ({...state, isLoading:false, isOpen:true});\r\n      console.log(\"Error Occured\");\r\n      console.log(error);\r\n      isAuth[1](false)\r\n    \r\n    }\r\n\r\n\r\n  }\r\n \r\n\r\n  \r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setState ({isOpen:false});\r\n  };\r\n  const [username, setuserName] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const classes = useStyles();\r\n  const paperStyle = { padding: 10, height: 'auto', width: 350, margin: '150px auto' }\r\n\r\nif(isAuth[0])\r\n{\r\n  return (\r\n    <Router>\r\n    <Route component={Home} exact path=\"/\"></Route>\r\n    <Route component={Home} exact path=\"/Pages/masterdata\"></Route>\r\n    <Route component={Home} exact path=\"/Pages/LoadShedding\"></Route>\r\n     <Route component={Home} exact path=\"/Pages/MasterDataArchive\"></Route>\r\n  <Route component={Home} exact path=\"/Pages/LoadSheddingArchive\"></Route> \r\n  <Route path=\"/Pages/TrafoShutdown\" component={TrafoShutdown} />\r\n    </Router>\r\n\r\n    \r\n  ) \r\n \r\n \r\n}\r\n  return (\r\n    <div className=\"container-fluid bg\">\r\n    <div className=\"row\">\r\n        <div className=\"col-md-4 col-sm-4 col-xs-12\">  </div>\r\n        <div className=\"col-md-4 col-sm-4 col-xs-12\">\r\n\r\n        <Grid>\r\n        <Paper elevation={3} style={paperStyle}>\r\n          <Grid align='Center'>\r\n  \r\n  \r\n            <div className={classes.paper}>\r\n              <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n              </Avatar>\r\n              <CssBaseline />\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Sign in\r\n        </Typography>\r\n              <form className={classes.form} onSubmit={Verifylogin}>\r\n  \r\n                <Controls.Input\r\n                variant=\"outlined\"\r\n                  \r\n                  name=\"username\"\r\n                  label=\"User Name\"\r\n                  type=\"text\"\r\n                  size = \"small\"\r\n                  placeholder = \"Enter User Name Here\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"userName\"\r\n                  onChange={(e) => { setuserName(e.target.value) }}\r\n                >\r\n                \r\n                \r\n                </Controls.Input>\r\n                <Controls.Input\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  onChange={(e) => { setPassword(e.target.value) }}\r\n                />\r\n  \r\n                <Controls.Button\r\n               \r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                 // className={classes.submit}\r\n                  disabled={state.isLoading}\r\n                >\r\n             SIGN IN\r\n  \r\n                </Controls.Button>\r\n\r\n              <Controls.LoadingControl open={state.isLoading}></Controls.LoadingControl>\r\n               <Snackbar open={state.isOpen} autoHideDuration={2500} onClose={handleClose} message=\"Error Occured, Please Contact Administrator\" >\r\n                 \r\n                </Snackbar>\r\n              </form>\r\n  \r\n            </div>\r\n           \r\n          </Grid>\r\n      \r\n        </Paper>\r\n        <Footer></Footer>\r\n        \r\n      </Grid>\r\n    \r\n    <div className=\"col-md-4 col-sm-4 col-xs-12\"></div>\r\n    </div></div>\r\n    </div>\r\n  );\r\n\r\n}\r\n","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\Masterdata.js",["154","155","156","157","158","159","160"],"import React, { useState, useEffect } from \"react\";\r\nimport MasterDataForm from \"./MasterDataForm\";\r\nimport PeopleOutlineIcon from \"@material-ui/icons/PeopleOutline\";\r\nimport AOS from 'aos';\r\nimport 'aos/dist/aos.css';\r\nimport {\r\n  Paper,\r\n  makeStyles,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Toolbar,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport UseTable from \"../UseTable\";\r\nimport { Controls } from \"../Controls/Controls\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Popup from \"../Popup\";\r\nimport { Snackbar } from \"@material-ui/core\";\r\nimport {\r\n  InsertMasterData,\r\n  updateMasterData,\r\n  AddMasterData,\r\n  getAllMasterData,\r\n} from \"../Api/api\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport EditOutlined from \"@material-ui/icons/EditOutlined\";\r\nimport XLSX from \"xlsx\";\r\nimport Notifications from \"../Controls/Notifications\";\r\nimport ConfirmDialogue from \"../Controls/ConfirmDialogue\";\r\nimport Footer from \"./Footer\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { Button as BtButton } from \"react-bootstrap\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  pageContenet: {\r\n    margin: theme.spacing(3),\r\n    padding: theme.spacing(5),\r\n    width: \"95%\",\r\n  },\r\n  inputControl: {\r\n    //padding : theme.spacing(5),\r\n    margin: theme.spacing(3),\r\n    width: \"20%\",\r\n  },\r\n  addNewbtn: {\r\n    position: \"absolute\",\r\n    right: \"10px\",\r\n  },\r\n}));\r\n\r\nconst headCells = [\r\n  { id: \"MasterDataSNO\", label: \"SNO\" },\r\n  { id: \"ISLAND\", label: \"ISLAND\" },\r\n  { id: \"gridBlock\", label: \"Grid Block\" },\r\n  { id: \"trafo\", label: \"TRAFO\" },\r\n  { id: \"feederID\", label: \"Feeder ID\" },\r\n  { id: \"switch_Number\", label: \"Switch #\" },\r\n  { id: \"switch_Name\", label: \"Switch Name\" },\r\n  { id: \"switch_Type\", label: \"Switch Type\" },\r\n  { id: \"feedeR_TYPE\", label: \"FEEDER TYPE\" },\r\n  { id: \"group\", label: \"Group\" },\r\n  { id: \"category\", label: \"Category\" },\r\n  { id: \"switch_Make\", label: \"Switch Make\" },\r\n  { id: \"region\", label: \"Region\" },\r\n  { id: \"cable_Status\", label: \"Cable Status Single/Double cable\" },\r\n  { id: \"ufR_SW\", label: \"UFR (Sw)\" },\r\n  { id: \"stage_A\", label: \"Stage A 49.4 df/dt\" },\r\n  { id: \"stage_B\", label: \"Stage B 49.4 df/dt\" },\r\n  { id: \"s1\", label: \"49.3(S1)\" },\r\n  { id: \"s2\", label: \"49.2(S2)50 ms3\" },\r\n  { id: \"s3\", label: \"49.0 (S3) 150ms\" },\r\n  { id: \"s4\", label: \"48.8 (S4) 200ms\" },\r\n  { id: \"s5\", label: \"48.6(S5)50 ms\" },\r\n  { id: \"s6\", label: \"48.6(S6)200 ms\" },\r\n  { id: \"s7\", label: \"48.6(S7)300 ms\" },\r\n  { id: \"s8\", label: \"48.5(S8)100 ms\" },\r\n  { id: \"s9\", label: \"48.5(S9)50 ms\" },\r\n  { id: \"s10\", label: \"48.4(S10)100 ms\" },\r\n  { id: \"s11\", label: \"48.4(S11)50 ms\" },\r\n  { id: \"caP_MVAR\", label: \"CAP (Faulty, drop) MVAR\" },\r\n  { id: \"caP_OK_MVAR\", label: \"CAP OK MVAR\" },\r\n  { id: \"dataAddedBy\", label: \"Data Added By User\" },\r\n  { id: \"dataAddedDateTime\", label: \"Data Added DateTime\" },\r\n  { id: \"actions\", label: \"Actions\", disableSorting: true },\r\n];\r\n\r\nconst ExcelHeadings = [\r\n  \"ISLAND\",\r\n  \"GridBlock\",\r\n  \"TRAFO\",\r\n  \"FeederID\",\r\n  \"Switch_Number\",\r\n  \"Switch_Name\",\r\n  \"Switch_Type\",\r\n  \"FEEDER_TYPE\",\r\n  \"Group\",\r\n  \"Category\",\r\n  \"Switch_Make\",\r\n  \"Region\",\r\n  \"Cable_Status\",\r\n  \"UFR_SW\",\r\n  \"Stage_A\",\r\n  \"Stage_B\",\r\n  \"S1\",\r\n  \"S2\",\r\n  \"S3\",\r\n  \"S4\",\r\n  \"S5\",\r\n  \"S6\",\r\n  \"S7\",\r\n  \"S8\",\r\n  \"S9\",\r\n  \"S10\",\r\n  \"S11\",\r\n  \"CAP_OK_MVAR\",\r\n  \"CAP_MVAR\",\r\n];\r\n\r\n\r\nexport default function Masterdata() {\r\n  const [getMasterData, setMasterData] = useState([]);\r\n  const [filterfn, setFilter] = useState({\r\n    fn: (masterdataRecords) => {\r\n      return masterdataRecords;\r\n    },\r\n  });\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n  const [isUpdated, setUpdated] = useState(\"\");\r\n  const [recordForEdit, setRecordForEdit] = useState(null);\r\n  const [getfile, setFile] = useState();\r\n  const [isFileExsist, setisFileExsist] = useState(false);\r\n  const [notify, setNotify] = useState({\r\n    isOpen: false,\r\n    message: \"\",\r\n    type: \"\",\r\n  });\r\n  const [ConfirmDialog, setConfirmDialog] = useState({\r\n    title: \"\",\r\n    subtitle: \"\",\r\n    isOpen: false,\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    console.log(isUpdated);\r\n    const fetchAPI = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setMasterData(await getAllMasterData());\r\n        AOS.init({\r\n            duration : 2000\r\n          })\r\n        console.log(`masterData ${getMasterData}`);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.log(`Error ${error}`);\r\n      }\r\n    };\r\n\r\n    fetchAPI();\r\n  }, [isUpdated]);\r\n\r\n  const readFile = () => {\r\n    setLoading(true);\r\n    var f = getfile;\r\n    var name = f.name;\r\n    const reader = new FileReader();\r\n    reader.onload = async (evt) => {\r\n      // evt = on_file_select event\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      //const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      /* Update state */\r\n      let dataHeader = XLSX.utils.sheet_to_json(ws, {\r\n        header: 1,\r\n        //raw: true\r\n      });\r\n      const data = XLSX.utils.sheet_to_json(ws, {\r\n        //raw: true\r\n      });\r\n      console.log(data);\r\n\r\n      console.log(JSON.stringify(data));\r\n      //  console.log(\"Data>>>\" + data);// shows that excel data is read\r\n      //console.log(convertToJson(data)); // shows data in json format\r\n      console.log(dataHeader);\r\n      dataHeader = JSON.stringify(dataHeader[0]);\r\n      console.log(dataHeader);\r\n      console.log(JSON.stringify(ExcelHeadings));\r\n      if (dataHeader == JSON.stringify(ExcelHeadings)) {\r\n        console.log(true);\r\n        console.log(\"Sending Data to API\");\r\n\r\n        await AddMasterData(data);\r\n        console.log(\"Data Uplaoded\");\r\n        setNotify({\r\n            isOpen: true,\r\n            message: \"Record Saved Successfull\",\r\n            type: \"success\",\r\n          });\r\n        if (isUpdated === \"yes\") {\r\n          setUpdated(\"yes!\");\r\n        } else {\r\n          setUpdated(\"yes\");\r\n        }\r\n      } else {\r\n        console.log(\"false\");\r\n        setNotify({\r\n          isOpen: true,\r\n          message: \"File type not matched.. Please upload coorect file\",\r\n          type: \"warning\",\r\n        });\r\n\r\n        setisFileExsist(false);\r\n        setFile();\r\n      }\r\n      setLoading(false);\r\n    };\r\n    reader.readAsBinaryString(f);\r\n  };\r\n\r\n  const filePathset = (e) => {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n    var file = e.target.files[0];\r\n    console.log(file);\r\n    // this.setState({ file });\r\n    setFile(file);\r\n\r\n    setisFileExsist(true);\r\n  };\r\n\r\n  console.log(\"Called this Method\");\r\n\r\n  const [state, setState] = useState({\r\n    vertical: \"bottom\",\r\n    horizontal: \"center\",\r\n    isOpen: false,\r\n  });\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setState({ isOpen: false });\r\n  };\r\n\r\n  const addOredit = async (values, resetForm) => {\r\n    console.log(values.MasterDataSNO);\r\n    if (values.MasterDataSNO === 0) {\r\n      setLoading(true);\r\n      await InsertMasterData(values);\r\n      setLoading(false);\r\n    } else {\r\n      setLoading(true);\r\n      await updateMasterData(values);\r\n      setLoading(false);\r\n    }\r\n    if (isUpdated === \"yes\") {\r\n      setUpdated(\"yes!\");\r\n    } else {\r\n      setUpdated(\"yes\");\r\n    }\r\n\r\n    setRecordForEdit(null);\r\n\r\n    setOpenPopup(false);\r\n    setNotify({\r\n      isOpen: true,\r\n      message: \"Record Saved Successfull\",\r\n      type: \"success\",\r\n    });\r\n  };\r\n\r\n  const Delete = (id) => {\r\n    setConfirmDialog({\r\n      ...ConfirmDialog,\r\n      isOpen: false,\r\n    });\r\n    console.log(\"Id Selected\", id);\r\n  };\r\n  const hanleChange = (e) => {\r\n    const Tvalue = e.target;\r\n    console.log(e.target);\r\n    console.log(Tvalue.value == \"\");\r\n    console.log(Tvalue.value);\r\n\r\n    setFilter({\r\n      fn: (masterdataRecords) => {\r\n        if (Tvalue.value == \"\") {\r\n          return masterdataRecords;\r\n        } else {\r\n          try {\r\n            return masterdataRecords.filter((x) =>\r\n              x.switch_Type.includes(e.target.value)\r\n            );\r\n          } catch (error) {\r\n            console.log(error);\r\n            return <h1> Error</h1>;\r\n          }\r\n        }\r\n      },\r\n    });\r\n  };\r\n  const openInPopup = (item) => {\r\n    setRecordForEdit(item);\r\n    setOpenPopup(true);\r\n  };\r\n  const {\r\n    TblContainer,\r\n    TblHead,\r\n    TblPagination,\r\n    recordAfterPagingAndSorting,\r\n  } = UseTable(getMasterData, headCells, getMasterData.length, filterfn);\r\n  console.log(getMasterData.length);\r\n  const classes = useStyles();\r\n  const isTokenisAlive = localStorage.getItem(\"Token\");\r\n\r\n  if (isTokenisAlive == null || isTokenisAlive == undefined) {\r\n    console.log(\"Token is Expired\");\r\n    return (\r\n      <Snackbar\r\n        open={state.isOpen}\r\n        autoHideDuration={2500}\r\n        onClose={handleClose}\r\n        message=\"Session is Expired\"\r\n      ></Snackbar>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        {/* <div>\r\n      \r\n        <input\r\n              type=\"file\"\r\n              id=\"file\"\r\n             \r\n             onChange={filePathset}\r\n              \r\n            />\r\n            <button\r\n              onClick={() => {\r\n                readFile();\r\n              }}\r\n            >\r\n              Read File\r\n            </button>\r\n        </div> */}\r\n      \r\n        <Paper className={classes.pageContenet}>\r\n        <Controls.LoadingControl open={loading}></Controls.LoadingControl>\r\n          <Form style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n            <Form.File\r\n              id=\"upload1\"\r\n              style={{ width: \"200px\", marginBottom: \"10px\" }}\r\n              onChange={filePathset}\r\n            />\r\n            <BtButton\r\n              variant=\"secondary\"\r\n              size=\"sm\"\r\n              style={{\r\n                borderRadius: \"10\",\r\n                marginBottom: \"10px\",\r\n                height: \"40px\",\r\n                marginLeft: \"50px\",\r\n              }}\r\n              onClick={() => {\r\n                readFile();\r\n              }}\r\n              disabled={isFileExsist === false}\r\n            >\r\n              Upload File\r\n            </BtButton>\r\n         \r\n          </Form>\r\n          <Toolbar>\r\n            <Controls.Input\r\n              className={classes.inputControl}\r\n              label=\"Search Switch type\"\r\n              variant=\"outlined\"\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <Search></Search>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              onChange={hanleChange}\r\n            ></Controls.Input>\r\n            <Controls.Input\r\n              className={classes.inputControl}\r\n              label=\"Search Feeder Id\"\r\n              variant=\"outlined\"\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <Search></Search>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            ></Controls.Input>\r\n            <Controls.Button\r\n              variant=\"outlined\"\r\n              startIcon={<AddIcon></AddIcon>}\r\n              className={classes.addNewbtn}\r\n              onClick={() => {\r\n                setOpenPopup(true);\r\n                setRecordForEdit(null);\r\n              }}\r\n            >\r\n              Add New\r\n            </Controls.Button>\r\n           \r\n          </Toolbar>\r\n          <div data-aos=\"fade-down\" data-aos-easing=\"linear\">\r\n          <TblContainer>\r\n            <TblHead></TblHead>\r\n            <TableBody>\r\n              {recordAfterPagingAndSorting().map((row) => (\r\n                <TableRow key={row.MasterDataSNO}>\r\n                  <TableCell>{row.MasterDataSNO}</TableCell>\r\n                  <TableCell>{row.ISLAND}</TableCell>\r\n                  <TableCell>{row.GridBlock}</TableCell>\r\n                  <TableCell>{row.TRAFO}</TableCell>\r\n                  <TableCell>{row.FeederID}</TableCell>\r\n                  <TableCell>{row.Switch_Number}</TableCell>\r\n                  <TableCell>{row.Switch_Name}</TableCell>\r\n                  <TableCell>{row.Switch_Type}</TableCell>\r\n                  <TableCell>{row.FEEDER_TYPE}</TableCell>\r\n                  <TableCell>{row.Switch_Make}</TableCell>\r\n                  <TableCell>{row.Group}</TableCell>\r\n                  <TableCell>{row.Category}</TableCell>\r\n                  <TableCell>{row.Region}</TableCell>\r\n                  <TableCell>{row.Cable_Status}</TableCell>\r\n                  <TableCell>{row.UFR_SW}</TableCell>\r\n                  <TableCell>{row.Stage_A}</TableCell>\r\n                  <TableCell>{row.Stage_B}</TableCell>\r\n                  <TableCell>{row.S1}</TableCell>\r\n                  <TableCell>{row.S2}</TableCell>\r\n                  <TableCell>{row.S3}</TableCell>\r\n                  <TableCell>{row.S4}</TableCell>\r\n                  <TableCell>{row.S5}</TableCell>\r\n                  <TableCell>{row.S6}</TableCell>\r\n                  <TableCell>{row.S7}</TableCell>\r\n                  <TableCell>{row.S8}</TableCell>\r\n                  <TableCell>{row.S9}</TableCell>\r\n                  <TableCell>{row.S10}</TableCell>\r\n                  <TableCell>{row.S11}</TableCell>\r\n                  <TableCell>{row.CAP_OK_MVAR}</TableCell>\r\n                  <TableCell>{row.CAP_MVAR}</TableCell>\r\n                  <TableCell>{row.dataAddedBy}</TableCell>\r\n                  <TableCell>\r\n                    {new Date(row.dataAddedDateTime).toDateString()}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Controls.ActionButton color=\"primary\">\r\n                      <EditOutlined\r\n                        fontSize=\"small\"\r\n                        onClick={() => {\r\n                          openInPopup(row);\r\n                          console.log(row);\r\n                        }}\r\n                      ></EditOutlined>\r\n                    </Controls.ActionButton>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Controls.ActionButton\r\n                      color=\"secondary\"\r\n                      onClick={() => {\r\n                        setConfirmDialog({\r\n                          isOpen: true,\r\n                          title: \"Are you sure to Delete this Record ? \",\r\n                          subtitle: \"You can't change once record Deleted\",\r\n                          onConfirm: () => {\r\n                            Delete(row.MasterDataSNO);\r\n                          },\r\n                        });\r\n                      }}\r\n                    >\r\n                      <CloseIcon fontSize=\"small\"></CloseIcon>\r\n                    </Controls.ActionButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </TblContainer>\r\n          <TblPagination></TblPagination>\r\n          </div>\r\n        </Paper>\r\n    \r\n        <Footer></Footer>\r\n        \r\n        <Popup\r\n          openPopup={openPopup}\r\n          setopenPopup={setOpenPopup}\r\n          title=\"Master Data Form\"\r\n        >\r\n            <Controls.LoadingControl open={loading}></Controls.LoadingControl>\r\n            <div data-aos=\"zoom-in-up\">\r\n          <MasterDataForm\r\n            addOrEdit={addOredit}\r\n            recordForEdit={recordForEdit}\r\n          ></MasterDataForm>\r\n          \r\n          </div>\r\n          \r\n        </Popup>\r\n    \r\n        <Notifications notify={notify} setNotify={setNotify}></Notifications>\r\n        <ConfirmDialogue\r\n          ConfirmDialog={ConfirmDialog}\r\n          setConfirmDialog={setConfirmDialog}\r\n        ></ConfirmDialogue>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Home.js",["161"],"import React, { useContext } from 'react'\r\nimport NavBar from \"./Components/NavBar/Navbar\";\r\nimport {BrowserRouter as Router,Switch,Route  } from \"react-router-dom\";\r\n\r\nimport Masterdata from \"./Components/Pages/Masterdata\";\r\nimport history from \"./history\";\r\nimport Login from './Components/login';\r\n\r\nimport isAuthContext from \"./Components/AppContext\"\r\nimport Loadshedding from './Components/Pages/Loadshedding';\r\nimport MasterDataArchive  from \"./Components/Pages/MasterDataArchive\";\r\nimport LoadSheddingArchive from './Components/Pages/LoadSheddingArchive';\r\nimport TrafoShutdown from './Components/Pages/TrafoShutdown';\r\nimport Header from './Components/NavBar/Header';\r\n\r\n\r\nexport default function Home(   ) {\r\n   \r\n    const isAppAuth = useContext(isAuthContext)\r\n    console.log(isAppAuth);\r\n    \r\n    if(!isAppAuth[0])\r\n     {\r\n        console.log(\"Executed this line 1\")\r\n        return (<Route path=\"/\" component={Login} />)\r\n    }\r\n    else\r\n    {\r\n        console.log(\"Executed this line 2\")\r\n    return (\r\n        <div className=\"bgHome\">\r\n        <Router history={history}>\r\n    <Header></Header>\r\n        <Switch>\r\n    \r\n        <Route exact path=\"/Login\" component={Login}> </Route>\r\n        <Route exact path=\"/\" component={Home}> </Route>\r\n        <Route  path=\"/Pages/masterdata\" component={Masterdata} />\r\n    \r\n      \r\n        <Route path=\"/Pages/Loadshedding\" component={Loadshedding} />\r\n        <Route path=\"/Pages/MasterDataArchive\" component={MasterDataArchive} />\r\n        <Route path=\"/Pages/LoadSheddingArchive\" component={LoadSheddingArchive} />\r\n        <Route path=\"/Pages/TrafoShutdown\" component={TrafoShutdown} />\r\n        \r\n        <Route path=\"/\" component={Login} />\r\n    \r\n       \r\n        </Switch>\r\n        </Router>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\Footer.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Popup.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\MasterDataForm.js",["162"],"import React, { useEffect,useState } from 'react'\r\nimport { Controls } from '../../Components/Controls/Controls';\r\nimport UseForm, { Form } from \"../../Components/UseForm\";\r\nimport { Grid, makeStyles } from '@material-ui/core'\r\n\r\n\r\nconst useStyles =  makeStyles( theme => ({\r\n    \r\n    inputControl : {\r\n        \r\n        \r\n        \r\n        '& .MuiOutlinedInput-root' : {\r\n            margin : \"0px 5px\", \r\n        }\r\n    \r\n},\r\n\r\n    \r\n\r\n}))\r\nconst initialFValues = {\r\n    MasterDataSNO : 0,\r\n    ISLAND: \"\",\r\n    grid: \"\",\r\n    GridBlock: \"\",\r\n    TRAFO: \"\",\r\n    FeederID: 0,\r\n    Switch_Number: 0,\r\n\r\n    Switch_Name: \"\",\r\n    Switch_Type: \"\",\r\n    FEEDER_TYPE: \"\",\r\n    Group: \"\",\r\n    Category: \"\", Switch_Make: \"\",\r\n    Region: \"\", Cable_Status: \"\", UFR_SW: \"\",\r\n    Stage_A: \"\", Stage_B: \"\",\r\n    S1: \"\", S2: \"\", S3: \"\", S4: \"\",S5: \"\", S6: \"\", S7: \"\", S8: \"\", S9: \"\", S10: \"\", S11: \"\", CAP_OK_MVAR: \"\", CAP_MVAR: \"\",\r\n}\r\nexport default function MasterDataForm(props) {\r\n    const {addOrEdit , recordForEdit} =props;\r\n    const { values, setValues,handleChange } = UseForm(initialFValues);\r\n    const  [loading, setLoading] = useState(false)\r\n    useEffect ( ()=> {\r\n\r\n        if(recordForEdit != null) {\r\n            setValues({...recordForEdit})\r\n        }\r\n    }, [recordForEdit])\r\n\r\n \r\n    \r\n\r\n    const handleSubmit = e => {\r\n       \r\n        setLoading(true);\r\n        e.preventDefault();\r\n        console.log(values);\r\n        addOrEdit(values);\r\n        setLoading(false);\r\n\r\n    }\r\n    const classes = useStyles();\r\n    return (\r\n     \r\n        <Form onSubmit= {handleSubmit}>\r\n\r\n            <Grid>\r\n                <Grid container>\r\n                \r\n                    <Grid item xs={6} >\r\n\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.ISLAND}\r\n                            name=\"ISLAND\"\r\n                            label=\"ISLAND\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter ISLAND Name\"\r\n                            margin=\"normal\"\r\n                            required\r\n\r\n                            id=\"ISLAND\"\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"1\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.GridBlock}\r\n                            name=\"GridBlock\"\r\n                            label=\"gridblock\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Grid Block\"\r\n                            margin=\"normal\"\r\n                            required\r\n\r\n                            id=\"GridBlock\"\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"3\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.TRAFO}\r\n                            name=\"TRAFO\"\r\n                            label=\"Trafo\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Trafo Name\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            inputprops={{ tabIndex: \"5\" }}\r\n\r\n                            onChange={handleChange}\r\n                            className = {classes.inputControl}\r\n                        />\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.Switch_Type}\r\n                            name=\"Switch_Type\"\r\n                            label=\"Switch Type\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Switch Type Here\"\r\n                            margin=\"normal\"\r\n                            required   \r\n                            inputprops={{ tabIndex: \"7\" }}\r\n                            className = {classes.inputControl}\r\n\r\n\r\n                            onChange={handleChange}\r\n                        />\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.FEEDER_TYPE}\r\n                            name=\"FEEDER_TYPE\"\r\n                            label=\"Feeder Type\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Feeder Type Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            inputprops={{ tabIndex: \"9\" }}\r\n\r\n                            onChange={handleChange}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.Group}\r\n                            name=\"Group\"\r\n                            label=\"Group\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Group Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"11\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.Cable_Status}\r\n                            name=\"Cable_Status\"\r\n                            label=\"Cable Status\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Cable Status Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n\r\n                            inputprops={{ tabIndex: \"13\" }}\r\n                            onChange={handleChange}\r\n                            className = {classes.inputControl}\r\n                        />\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.Stage_A}\r\n                            name=\"Stage_A\"\r\n                            label=\"Stage A 49.4 df/dt\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Stage A 49.4 df/dt Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"15\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.S1}\r\n                            name=\"S1\"\r\n                            label=\"49.3(S1)\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter 49.3(S1) Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"17\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.S3}\r\n                            name=\"S3\"\r\n                            label=\"49.0 (S3) 150ms\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter 49.0 (S3) 150ms Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"19\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.S5}\r\n                            name=\"S5\"\r\n                            label=\"48.6(S5) 50 ms\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter 48.6(S5) 50 ms Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"21\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.S7}\r\n                            name=\"S7\"\r\n                            label=\"48.6(S7)300 ms\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter 48.6(S7) 300 ms Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"23\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.S9}\r\n                            name=\"S9\"\r\n                            label=\"48.5(S9) 50 ms\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter 48.5(S9)50 ms Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"25\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.S11}\r\n                            name=\"S11\"\r\n                            label=\"48.4(S11)50 ms\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter 48.4(S11) 50 ms Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"27\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.CAP_MVAR}\r\n                            name=\"CAP_MVAR\"\r\n                            label=\"CAP (Faulty, drop) MVAR\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter CAP (Faulty, drop) MVAR Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"29\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n                    </Grid>\r\n                \r\n                    <Grid item xs={6} >\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.FeederID}\r\n                            name=\"FeederID\"\r\n                            label=\"Feeder Id\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Feeder Id\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            inputprops={{ tabIndex: \"2\" }}\r\n\r\n                            onChange={handleChange}\r\n                            className = {classes.inputControl}\r\n                        />\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.Switch_Number}\r\n                            name=\"Switch_Number\"\r\n                            label=\"Switch Number\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Switch Number\"\r\n                            margin=\"normal\"\r\n                            required  \r\n                            inputprops={{ tabIndex: \"4\" }}\r\n                            className = {classes.inputControl}\r\n\r\n\r\n                            onChange={handleChange}\r\n                        />\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.Switch_Make}\r\n                            name=\"Switch_Make\"\r\n                            label=\"Switch Make\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Switch Make Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n\r\n                            inputprops={{ tabIndex: \"6\" }}\r\n                            onChange={handleChange}\r\n                            className = {classes.inputControl}\r\n                        />\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.Switch_Name}\r\n                            name=\"Switch_Name\"\r\n                            label=\"Switch Name\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Switch Name Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            inputprops={{ tabIndex: \"8\" }}\r\n\r\n                            onChange={handleChange}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.Category}\r\n                            name=\"Category\"\r\n                            label=\"Category\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Category Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            inputprops={{ tabIndex: \"10\" }}\r\n\r\n                            onChange={handleChange}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.Region}\r\n                            name=\"Region\"\r\n                            label=\"Region\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Region Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            inputprops={{ tabIndex: \"12\" }}\r\n\r\n                            onChange={handleChange}\r\n                            className = {classes.inputControl}\r\n                        />\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.UFR_SW}\r\n                            name=\"UFR_SW\"\r\n                            label=\"UFR (SW)\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter UFR (SW) Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"14\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.Stage_B}\r\n                            name=\"Stage_B\"\r\n                            label=\"Stage B 49.4 df/dt\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Stage B 49.4 df/dt Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"16\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.S2}\r\n                            name=\"S2\"\r\n                            label=\"49.2(S2) 50 ms3\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter 49.2(S2) 50 ms3 Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"18\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.S4}\r\n                            name=\"S4\"\r\n                            label=\"48.8 (S4) 200ms\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter 48.8 (S4) 200ms Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"20\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.S6}\r\n                            name=\"S6\"\r\n                            label=\"48.6(S6) 200 ms\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter 48.6(S6) 200 ms Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"22\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.S8}\r\n                            name=\"S8\"\r\n                            label=\"48.5(S8) 100 ms\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter 48.5(S8) 100 ms Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"24\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.S10}\r\n                            name=\"S10\"\r\n                            label=\"48.4(S10) 100 ms\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter 48.4(S10) 100 ms Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"26\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n\r\n\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.CAP_OK_MVAR}\r\n                            name=\"CAP_OK_MVAR\"\r\n                            label=\"CAP OK MVAR\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter CAP OK MVAR Here\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"28\" }}\r\n                            className = {classes.inputControl}\r\n                        />\r\n                        \r\n                    </Grid>\r\n\r\n                  \r\n                </Grid>\r\n            </Grid>\r\n            \r\n\r\n\r\n<Grid container justify=\"flex-end\" spacing={1}>\r\n<hr></hr>\r\n                        <div>\r\n                            <Controls.Button\r\n\r\n                                type=\"submit\"\r\n\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                // className={classes.submit}\r\n                                disabled={loading}\r\n                                inputprops={{ tabIndex: \"30\" }}\r\n                            >\r\n                                Submit\r\n\r\n              </Controls.Button>\r\n\r\n                            <Controls.Button\r\n\r\n                                type=\"submit\"\r\n\r\n                                variant=\"contained\"\r\n\r\n                                // className={classes.submit}\r\n                                disabled={false}\r\n                                inputprops={{ tabIndex: \"31\" }}\r\n                            >\r\n                                Reset\r\n\r\n            </Controls.Button>\r\n                        </div>\r\n</Grid>\r\n        </Form>\r\n    )\r\n}\r\n","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\ConfirmDialogue.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Api\\api.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\UseTable.js",["163"],"import { Table, TableBody, TableCell, TableRow , makeStyles,TableHead, TablePagination, TableSortLabel, TableContainer} from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\n\r\n\r\nconst useStyles =  makeStyles( theme => ({\r\n  \r\n    Table : {\r\n       marginTop : theme.spacing(3),\r\n        \r\n    \r\n       \"& .MuiTableCell-root\": {\r\n        borderLeft: \"1px solid rgba(224, 224, 224, 1)\"\r\n      },\r\n       '& thead th' : {\r\n        fontWeight : '300',\r\n          color : \"black\",\r\n          backgroundColor : \"White\",\r\n          height : \"10px\",\r\n          whiteSpace: \"nowrap\"\r\n\r\n       },\r\n       '& tbody td' : {\r\n        fontWeight : '100',\r\n       },\r\n\r\n       '& tbody tr:hover' : {\r\n        backgroundColor : 'lightgrey',\r\n        cursor: 'pointer'\r\n       },\r\n\r\n       '& .MuiTableCell-head ' :{\r\n\r\n       \r\n         lineHeight : \"10px\"\r\n       }\r\n   },\r\n    \r\n\r\n}))\r\nexport default function UseTable(records, headCells,lenght,filterfn) {\r\n\r\n   \r\n    console.log(lenght);\r\n \r\n    \r\n    \r\n    const pages = [100,1500,2000, lenght];\r\n    const  [page , setPage] = useState(0);\r\n    const  [rowsPerpage , setrowsPerpagePage] = useState(pages[page]);\r\n    const useClasses = useStyles();\r\n    const [order, setOrder] = useState()\r\n    const [orderBy, setOrderBy] =useState()\r\n\r\n    const TblContainer = props => (\r\n        <TableContainer>\r\n        <Table className = {useClasses.Table}>\r\n        {props.children}\r\n        </Table>\r\n        </TableContainer>\r\n    )\r\n      \r\n    const TblHead = props => {\r\n        \r\n        try {\r\n          const HandleSorting =(id) => {\r\n            console.log(orderBy === id && order === 'asc')\r\n            const isAsc = orderBy === id && order === 'asc';\r\n            setOrder(isAsc ? 'desc' : 'asc') \r\n            setOrderBy(id)\r\n        }\r\n          return ( <TableHead>\r\n            <TableRow>\r\n            {headCells.map ( header => (\r\n                <TableCell key= {header.id }\r\n                sortDirection = {orderBy === header.id ? order : false} >\r\n                {header.disableSorting ? header.label :\r\n                <TableSortLabel \r\n                active = {orderBy ===  header.id}\r\n                direction = {orderBy ===  header.id ? order : 'asc'}\r\n                onClick= { () => {HandleSorting(header.id)} }>\r\n                {header.label}\r\n                </TableSortLabel>\r\n             }\r\n                \r\n                </TableCell>\r\n            )) }\r\n            </TableRow>\r\n             </TableHead>\r\n           )\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n     \r\n       }\r\n            \r\n            const handleChange = (event, newPage) => {\r\n                console.log(newPage)\r\n                setPage(newPage);\r\n            }\r\n\r\n            const handleRowsPerPage = (e) => {\r\n                console.log(e.target.value)\r\n                setrowsPerpagePage (parseInt(e.target.value, 10));\r\n                setPage(0);\r\n            }\r\n            \r\n            function getComparator(order, orderBy) {\r\n                return order === 'desc'\r\n                  ? (a, b) => descendingComparator(a, b, orderBy)\r\n                  : (a, b) => -descendingComparator(a, b, orderBy);\r\n              }\r\n              \r\n              function stableSort(array, comparator) {\r\n                const stabilizedThis = array.map((el, index) => [el, index]);\r\n                stabilizedThis.sort((a, b) => {\r\n                  const order = comparator(a[0], b[0]);\r\n                  if (order !== 0) return order;\r\n                  return a[1] - b[1];\r\n                });\r\n                return stabilizedThis.map((el) => el[0]);\r\n              }\r\n\r\n              const recordAfterPagingAndSorting =() => {\r\n                console.log( stableSort(filterfn.fn(records) ,getComparator(order,orderBy)).slice(page*rowsPerpage, (page+1) * rowsPerpage))\r\n                                return stableSort(filterfn.fn(records) ,getComparator(order,orderBy)).slice(page*rowsPerpage, (page+1) * rowsPerpage);\r\n            }\r\n            function descendingComparator(a, b, orderBy) {\r\n                if (b[orderBy] < a[orderBy]) {\r\n                  return -1;\r\n                }\r\n                if (b[orderBy] > a[orderBy]) {\r\n                  return 1;\r\n                }\r\n                return 0;\r\n              }\r\n\r\n    const TblPagination = () => (\r\n\r\n        <TablePagination\r\n        component=\"div\" \r\n        rowsPerPageOptions = {pages}\r\n        count = {lenght}\r\n        rowsPerPage = {rowsPerpage} \r\n        page = {page}\r\n        onChangePage = {handleChange}\r\n        onChangeRowsPerPage = {handleRowsPerPage}\r\n       \r\n        \r\n      \r\n        \r\n        ></TablePagination>)\r\n    \r\n    return {TblContainer,TblHead,TblPagination,recordAfterPagingAndSorting}\r\n}\r\n","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\Controls.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\Notifications.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\UseForm.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\NavBar\\Header.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\TrafoShutdown.js",["164","165","166","167","168","169","170","171","172"],"import React , {useState,useEffect}from 'react'\r\nimport { Paper ,makeStyles, TableBody,TableRow, TableCell, Toolbar, InputAdornment} from '@material-ui/core';\r\nimport UseTable from \"../UseTable\";\r\nimport { Controls } from \"../Controls/Controls\";\r\nimport { Search } from '@material-ui/icons';\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Popup from \"../Popup\";\r\nimport { Snackbar  } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport EditOutlined from '@material-ui/icons/EditOutlined'\r\nimport TrafoShutdownForm from \"./TrafoShutdownForm\";\r\nconst useStyles =  makeStyles( theme => ({\r\n    pageContenet : {\r\n        \r\n        \r\n            margin: theme.spacing(3),\r\n            padding : theme.spacing(5), \r\n           width : '95%'\r\n        \r\n    },\r\n    inputControl : {\r\n        \r\n        \r\n        \r\n        //padding : theme.spacing(5), \r\n        margin: theme.spacing(3),\r\n        width : '20%'\r\n    \r\n},\r\naddNewbtn : {\r\n    position : 'absolute',\r\n    right : '10px'\r\n}\r\n    \r\n\r\n}))\r\n\r\nconst headCells = [\r\n    {id : 'TrafoShutdownSNO', label : 'SNO' },\r\n    {id : 'grid', label : 'Grid ' },\r\n    {id : 'trafo', label : 'Trafo' },\r\n    {id : 'time', label : 'Time' },\r\n    {id : 'date', label : 'Date' },\r\n    {id : 'feederAffected', label : 'Feeder Affected'},\r\n    {id : 'reason', label : 'Reason' },\r\n    {id : 'rating', label : 'Rating' },\r\n    {id : 'load', label : 'Load taken on Trafo' },\r\n    {id : 'gsm', label : 'GSM' },\r\n    {id : 'dataAddedDateTime', label : 'Data Added DateTime' },\r\n    {id : 'dataAddedBy', label : 'Data Added By' },\r\n    \r\n]\r\n\r\nexport default function TrafoShutdown() {\r\n\r\n    const [filterfn, setFilter] = useState( {fn : LSData => {return LSData}});\r\n    const [getLSData, setLSData] = useState([]);\r\n    const [openPopup, setOpenPopup] = useState(false);\r\n    const [isUpdated ,setUpdated] = useState(\"\")\r\n    const [recordForEdit ,setRecordForEdit] = useState(null)\r\n    // useEffect(() => {\r\n    //     console.log(isUpdated)\r\n    //     const fetchAPI = async () => {\r\n    //         try {\r\n               \r\n    //             setLSData(await GetLoadSheddings());\r\n             \r\n    //         } catch (error) {\r\n    //             console.log(`Error ${error}`)\r\n    //         }\r\n           \r\n    //     }\r\n    \r\n    \r\n    //     fetchAPI(); \r\n    // },[isUpdated]);\r\n    const [state, setState] = useState({\r\n        vertical : 'bottom',\r\n        horizontal: 'center',\r\n        isOpen : false,\r\n        \r\n    \r\n      });\r\n      \r\n      const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n    \r\n        setState ({isOpen:false});\r\n      };\r\n\r\n      const handleSubmit = e => {\r\n\r\n        e.preventDefault();\r\n        \r\n        \r\n      //  addExpiry(values);\r\n    }\r\n    \r\n\r\n      const addOredit = async (values,resetForm) => {\r\n        console.log(values.MasterDataSNO)\r\n        if(values.LoadSheddingSNO === 0)\r\n        {\r\n          //  await InsertLSData(values);\r\n           \r\n        }\r\n       \r\n        if(isUpdated === \"yes\")\r\n        {\r\n            setUpdated(\"yes!\")\r\n        }\r\n        else{\r\n            setUpdated(\"yes\")\r\n        }\r\n        \r\n        setRecordForEdit(null);\r\n        \r\n        \r\n        setOpenPopup(false);\r\n        \r\n    }\r\n\r\n\r\n  \r\n\r\n        \r\n    const hanleChange = (e) => {\r\n        const Tvalue = e.target;\r\n        console.log(e.target)\r\n        console.log(Tvalue.value == \"\")\r\n        console.log(Tvalue.value)\r\n    \r\n        setFilter ( {\r\n            fn: LSData => {\r\n                if(Tvalue.value == \"\")\r\n                {\r\n                    return LSData\r\n                }\r\n                else{\r\n                  \r\n                    return LSData.filter(x => x.block.includes(e.target.value) )\r\n                }\r\n            }\r\n\r\n        })\r\n    }\r\n    const openInPopup =(item) => {\r\n        setRecordForEdit(item);\r\n        setOpenPopup(true);\r\n    }\r\n    const {TblContainer,TblHead,TblPagination ,recordAfterPagingAndSorting} = UseTable(getLSData,headCells,getLSData.length ,filterfn);\r\n    //console.log(getMasterData.length)        \r\n    const classes = useStyles();\r\n    const isTokenisAlive = localStorage.getItem(\"Token\");\r\n    if(isTokenisAlive == null || isTokenisAlive == undefined)\r\n    {\r\n            console.log(\"Token is Expired\")\r\n            return (\r\n\r\n                <Snackbar open={state.isOpen} autoHideDuration={2500} onClose={handleClose} message=\"Session is Expired\" >\r\n               \r\n                </Snackbar>\r\n            )\r\n    }\r\n    else\r\n    {\r\n    return (\r\n        <>\r\n        <Paper className = {classes.pageContenet}>\r\n       \r\n        <Toolbar>\r\n        <Controls.Input\r\n        className = {classes.inputControl}\r\n        label = \"Block\"\r\n        variant = \"outlined\"\r\n      \r\n                InputProps = { {\r\n                    startAdornment : (<InputAdornment position=\"start\">\r\n                    <Search></Search>\r\n                    </InputAdornment>)\r\n                        \r\n                \r\n                }}\r\n                onChange = {hanleChange}\r\n        >\r\n        </Controls.Input>\r\n        <Controls.Input\r\n        className = {classes.inputControl}\r\n        label = \"Group\"\r\n        variant = \"outlined\"\r\n        InputProps = { {\r\n            \r\n            startAdornment : (<InputAdornment position=\"start\">\r\n            <Search></Search>\r\n            </InputAdornment>)\r\n                \r\n        \r\n        }}>\r\n        </Controls.Input>\r\n        <Controls.Button \r\n        variant = \"outlined\" startIcon = {<AddIcon></AddIcon> } className= {classes.addNewbtn}\r\n        onClick = { () => {setOpenPopup(true) ;setRecordForEdit(null) } }\r\n        >Add ShutdownPlan\r\n        </Controls.Button>\r\n\r\n       \r\n        </Toolbar>\r\n           <TblContainer>\r\n           \r\n            <TblHead></TblHead>\r\n                <TableBody>\r\n                {\r\n                \r\n                getLSData.map( row => (\r\n                <TableRow key={row.LoadSheddingSNO}>\r\n                <TableCell >{row.LoadSheddingSNO}</TableCell>\r\n                <TableCell >{row.group}</TableCell>\r\n                <TableCell >{row.block}</TableCell>\r\n                <TableCell >{row.llFeders}</TableCell>\r\n                <TableCell >{row.mlFeeders}</TableCell>\r\n                <TableCell >{row.hlFeeders}</TableCell>\r\n                <TableCell >{row.vhlFeeders}</TableCell>\r\n                <TableCell >{row.totalFeeders}</TableCell>\r\n                <TableCell >{row.spell_1_to_and_From}</TableCell>\r\n                <TableCell >{row.spell_2_to_and_From}</TableCell>\r\n                <TableCell >{row.spell_3_to_and_From}</TableCell>\r\n                <TableCell >{row.spell_4_to_and_From}</TableCell>\r\n                <TableCell >{row.spell_5_to_and_From}</TableCell>\r\n                <TableCell >{row.spell_6_to_and_From}</TableCell>\r\n                <TableCell >{new Date(row.planExpiry).toDateString()}</TableCell>\r\n                <TableCell >{new Date(row.dataAddedDateTime).toDateString()}</TableCell>\r\n                <TableCell >{row.dataAddedBy}</TableCell>\r\n                <TableCell>\r\n                <Controls.ActionButton color=\"primary\"> \r\n                <EditOutlined fontSize= \"small\" onClick = { () => {openInPopup(row);console.log(row); }}></EditOutlined>\r\n                </Controls.ActionButton>\r\n                </TableCell>\r\n                <TableCell>\r\n                <Controls.ActionButton color=\"secondary\"> \r\n                <CloseIcon fontSize= \"small\"></CloseIcon>\r\n                </Controls.ActionButton>\r\n                </TableCell>\r\n                        </TableRow>\r\n                    )\r\n\r\n                    )\r\n                }\r\n                </TableBody>\r\n            </TblContainer>\r\n            <TblPagination\r\n            ></TblPagination>\r\n            </Paper> \r\n        \r\n        <Popup\r\n        openPopup =  {openPopup}\r\n        setopenPopup = {setOpenPopup} \r\n        title = \"Shutdown Form\">\r\n       <TrafoShutdownForm></TrafoShutdownForm>\r\n        </Popup>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n}\r\n","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\LoadSheddingArchive.js",["173","174","175"],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\services\\auth-header.js",["176"],"import React from 'react'\r\n\r\nexport default function Authheader() {\r\n    const user = localStorage.getItem(\"Token\");\r\n  \r\n        if(user && user.accessToken != null)\r\n        {\r\n            return {Authorization : 'Bearer ' + user.accessToken};\r\n        }\r\n        else\r\n        {\r\n            return {};\r\n        }\r\n        \r\n}\r\n","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\LoadingControl.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\TrafoShutdownForm.js",["177"],"import React, { useEffect } from 'react'\r\nimport { Controls } from '../../Components/Controls/Controls';\r\nimport UseForm, { Form } from \"../../Components/UseForm\";\r\nimport { Grid , makeStyles} from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    inputControl: {\r\n      \"& .MuiOutlinedInput-root\": {\r\n        margin: \"0px 5px\",\r\n      },\r\n      \r\n    },\r\n\r\n    selectControl : {\r\n        '& ..MuiOutlinedInput-root': {\r\n            root :\r\n            {\r\n                margin: \"0px 5px\",\r\n            }\r\n           \r\n          }, \r\n    }\r\n  }));\r\n  \r\nconst initialFValues = {\r\n  TrafoShutdownSNO: 0,\r\n  grid : \"\",\r\n  trafo: \"\",\r\n  time : \"\",\r\n  date : new Date(),\r\n  feederAffected : false,\r\n  reason : \"\",\r\n  rating : \"\",\r\n  load : \"\",\r\n  gsm : \"\",\r\n}\r\nexport default function TrafoShutdownForm(props) {\r\n    const classes = useStyles();\r\n    const {addOrEdit , recordForEdit} =props;\r\n    const { values, setValues,handleChange } = UseForm(initialFValues);\r\n    useEffect ( ()=> {\r\n\r\n        if(recordForEdit != null) {\r\n            setValues({...recordForEdit})\r\n        }\r\n    }, [recordForEdit])\r\n\r\n \r\n    \r\n\r\n    const handleSubmit = e => {\r\n       \r\n        e.preventDefault();\r\n        console.log(values);\r\n        addOrEdit(values);\r\n\r\n    }\r\n    return (\r\n        <Form onSubmit= {handleSubmit}>\r\n\r\n            <Grid>\r\n                <Grid container>\r\n                    <Grid item xs={6} >\r\n\r\n\r\n                    <Controls.Select\r\n                            name=\"Grid\"\r\n                            label=\"Select Grid\"\r\n                            value={values.grid}\r\n                            onChange={handleChange}\r\n                            className={classes.selectControl}\r\n                            \r\n                        />\r\n\r\n\r\n                        <Controls.Input\r\n                             className={classes.inputControl}\r\n                            variant=\"outlined\"\r\n                            value={values.time}\r\n                            name=\"time\"\r\n                            label=\"Time (24hrs format)\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Time\"\r\n                            margin=\"normal\"\r\n                            required\r\n\r\n                            id=\"time\"\r\n                            onChange={handleChange}\r\n                            inputprops={{ tabIndex: \"3\" }}\r\n                        />\r\n\r\n                        <Controls.Select\r\n                        name=\"feederAffected\"\r\n                        label=\"Feeder Affected\"\r\n                        value={values.feederAffected}\r\n                        onChange={handleChange}\r\n                        className={classes.inputControl}\r\n                       \r\n                    />\r\n                    <Controls.Input\r\n                         className={classes.inputControl}\r\n                        variant=\"outlined\"\r\n                        value={values.rating}\r\n                        name=\"rating\"\r\n                        label=\"\"\r\n                        type=\"text\"\r\n                        size=\"medium\"\r\n                       disabled\r\n                        margin=\"normal\"\r\n                        required\r\n\r\n                        id=\"rating\"\r\n                        onChange={handleChange}\r\n                        inputprops={{ tabIndex: \"3\" }}\r\n                        \r\n                    />\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={6} >\r\n                   \r\n                    <Controls.Select\r\n                    name=\"trafo\"\r\n                    label=\"Select Trafo\"\r\n                    value={values.trafo}\r\n                    onChange={handleChange}\r\n                    className={classes.selectControl}\r\n                />\r\n                <Controls.DatePicker\r\n                name=\"Date\"\r\n                label = \"Enter Shutdown Date\"\r\n                value= {values.date}\r\n                className={classes.inputControl}\r\n               onChange= {handleChange}\r\n                >\r\n             \r\n        \r\n                </Controls.DatePicker>\r\n                        <Controls.Input\r\n                            variant=\"outlined\"\r\n                            value={values.reason}\r\n                            name=\"reason\"\r\n                            label=\"Reason\"\r\n                            type=\"text\"\r\n                            size=\"medium\"\r\n                            placeholder=\"Enter Reason\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            className={classes.inputControl}\r\n                            inputprops={{ tabIndex: \"6\" }}\r\n                            onChange={handleChange}\r\n                        />\r\n                        <Controls.Select\r\n                        name=\"load\"\r\n                        label=\"Select Load\"\r\n                        value={values.load}\r\n                        onChange={handleChange}\r\n                        className={classes.inputControl}\r\n                    /> <Controls.Select\r\n                    name=\"gsm\"\r\n                    label=\"Select GSM\"\r\n                    value={values.gsm}\r\n                    onChange={handleChange}\r\n                    className={classes.inputControl}\r\n                />\r\n                        <hr></hr>\r\n                        <div>\r\n                            <Controls.Button\r\n\r\n                                type=\"submit\"\r\n\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                // className={classes.submit}\r\n                                disabled={false}\r\n                                inputprops={{ tabIndex: \"30\" }}\r\n                            >\r\n                                Submit\r\n\r\n              </Controls.Button>\r\n\r\n                            <Controls.Button\r\n\r\n                                type=\"submit\"\r\n\r\n                                variant=\"contained\"\r\n\r\n                                // className={classes.submit}\r\n                                disabled={false}\r\n                                inputprops={{ tabIndex: \"31\" }}\r\n                            >\r\n                                Reset\r\n\r\n            </Controls.Button>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Form>\r\n    )\r\n}\r\n","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\ActionButton.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\Select.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\Button.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\MasterDataArchive.js",["178","179","180","181"],"import React, {useState, useEffect} from 'react'\r\nimport { Paper ,makeStyles, TableBody,TableRow, TableCell, Toolbar, InputAdornment} from '@material-ui/core';\r\nimport {getAllMasterDataArchive} from \"../Api/api\"\r\nimport UseTable from \"../UseTable\";\r\nimport { Snackbar  } from '@material-ui/core';\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { Controls } from \"../Controls/Controls\";\r\nconst useStyles =  makeStyles( theme => ({\r\n    pageContenet : {\r\n        \r\n        \r\n            margin: theme.spacing(3),\r\n            padding : theme.spacing(5), \r\n           width : '95%'\r\n        \r\n    },\r\n    inputControl : {\r\n        \r\n        \r\n        \r\n        //padding : theme.spacing(5), \r\n        margin: theme.spacing(3),\r\n        width : '20%'\r\n    \r\n},\r\naddNewbtn : {\r\n    position : 'absolute',\r\n    right : '10px'\r\n}\r\n    \r\n\r\n}))\r\n\r\nconst headCells = [\r\n    {id : 'MasterDataArchiveSNO', label : 'SNO' },\r\n    {id : 'MasterDataSNO', label : 'MasterData SNO' },\r\n    {id : 'ISLAND', label : 'ISLAND' },\r\n    {id : 'gridBlock', label : 'Grid Block' },\r\n    {id : 'trafo', label : 'TRAFO' },\r\n    {id : 'feederID', label : 'Feeder ID' },\r\n    {id : 'switch_Number', label : 'Switch #'},\r\n    {id : 'switch_Name', label : 'Switch Name' },\r\n    {id : 'switch_Type', label : 'Switch Type' },\r\n    {id : 'feedeR_TYPE', label : 'FEEDER TYPE' },\r\n    {id : 'group', label : 'Group' },\r\n    {id : 'category', label : 'Category' },\r\n    {id : 'switch_Make', label : 'Switch Make'},\r\n    {id : 'region', label : 'Region' },\r\n    {id : 'cable_Status', label : 'Cable Status Single/Double cable' },\r\n    {id : 'ufR_SW', label : 'UFR (Sw)'},\r\n    {id : 'stage_A', label : 'Stage A 49.4 df/dt'},\r\n    {id : 'stage_B', label : 'Stage B 49.4 df/dt'},\r\n    {id : 's1', label : '49.3(S1)' },\r\n    {id : 's2', label : '49.2(S2)50 ms3' },\r\n    {id : 's3', label : '49.0 (S3) 150ms' },\r\n    {id : 's4', label : '48.8 (S4) 200ms' },\r\n    {id : 's5', label : '48.6(S5)50 ms' },\r\n    {id : 's6', label : '48.6(S6)200 ms' },\r\n    {id : 's7', label : '48.6(S7)300 ms' },\r\n    {id : 's8', label : '48.5(S8)100 ms' },\r\n    {id : 's9', label : '48.5(S9)50 ms' },\r\n    {id : 's10', label : '48.4(S10)100 ms'},\r\n    {id : 's11', label : '48.4(S11)50 ms'},\r\n    {id: 'CAP_MVAR', label : 'CAP (Faulty, drop) MVAR' },\r\n    {id : 'CAP_OK_MVAR', label : 'CAP OK MVAR' },\r\n    {id : 'dataAddedName', label : 'Data Added By User' },\r\n    {id : 'dataAddedDateTime', label : 'Data Added DateTime' },\r\n    {id : 'ArchivedataAddedName', label : 'Data Archive By User' },\r\n    {id : 'ArchiveAddedDateTime', label : 'Archive Added DateTime' },\r\n]\r\n\r\n    export default function MasterDataArchive() {\r\n        const [getMasterData, setMasterData] = useState([]);\r\n        const [loading, setLoading] = useState(false);\r\n        const [filterfn, setFilter] = useState( {fn : masterdataRecords => {return masterdataRecords}});\r\n        const [state, setState] = useState({\r\n            vertical : 'bottom',\r\n            horizontal: 'center',\r\n            isOpen : false,\r\n            \r\n        \r\n          });\r\n          const handleClose = (event, reason) => {\r\n            if (reason === 'clickaway') {\r\n              return;\r\n            }\r\n        \r\n            setState ({isOpen:false});\r\n          };\r\n        useEffect(() => {\r\n          \r\n            const fetchAPI = async () => {\r\n                try {\r\n                    setLoading(true);\r\n              setMasterData(await getAllMasterDataArchive());\r\n             console.log(\"masterData  [\" +{getMasterData} + \"]\");\r\n             setLoading(false);\r\n                } catch (error) {\r\n                    console.log(\"Error \"+ {error});\r\n                        setLoading(false);\r\n                }\r\n               \r\n            }\r\n        \r\n        \r\n            fetchAPI(); \r\n        },[]);\r\n\r\n        const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n        const fileExtension = '.xlsx';\r\n    \r\n        const exportToCSV = (csvData, fileName) => {\r\n            const ws = XLSX.utils.json_to_sheet(csvData);\r\n            const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n            const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n            const data = new Blob([excelBuffer], {type: fileType});\r\n            FileSaver.saveAs(data, fileName + fileExtension);\r\n        }\r\n        const {TblContainer,TblHead,TblPagination ,recordAfterPagingAndSorting} = UseTable(getMasterData,headCells,getMasterData.length,filterfn);\r\n        const classes = useStyles();\r\n        const isTokenisAlive = localStorage.getItem(\"Token\");\r\n        if(isTokenisAlive == null || isTokenisAlive == undefined)\r\n    {\r\n            console.log(\"Token is Expired\")\r\n            return (\r\n\r\n                <Snackbar open={state.isOpen} autoHideDuration={2500} onClose={handleClose} message=\"Session is Expired\" >\r\n               \r\n                </Snackbar>\r\n            )\r\n    }\r\n    else\r\n    {\r\n    return (\r\n        <Paper className = {classes.pageContenet}>\r\n        <Toolbar>\r\n          \r\n        <Controls.Button \r\n        variant = \"outlined\" startIcon = {<AddIcon></AddIcon> } className= {classes.addNewbtn}\r\n        onClick = { () => {exportToCSV(getMasterData,\"MasterDataArchive\") } }\r\n        >Export To Excel\r\n        </Controls.Button>\r\n\r\n       \r\n        </Toolbar>\r\n       \r\n            <TblContainer>\r\n            <Controls.LoadingControl open={loading}></Controls.LoadingControl>\r\n            <TblHead></TblHead>\r\n                <TableBody>\r\n                {\r\n                    recordAfterPagingAndSorting().map( row => (\r\n                <TableRow key={row.MasterDataArchiveSNO}>\r\n                <TableCell >{row.MasterDataArchiveSNO}</TableCell>\r\n                <TableCell >{row.MasterDataSNO}</TableCell>\r\n                <TableCell >{row.ISLAND}</TableCell>\r\n                <TableCell >{row.GridBlock}</TableCell>\r\n                <TableCell >{row.TRAFO}</TableCell>\r\n                <TableCell >{row.FeederID}</TableCell>\r\n                <TableCell >{row.Switch_Number}</TableCell>\r\n                <TableCell >{row.Switch_Name}</TableCell>\r\n                <TableCell >{row.Switch_Type}</TableCell>\r\n                <TableCell >{row.FEEDER_TYPE}</TableCell>\r\n                <TableCell >{row.Switch_Make}</TableCell>\r\n                <TableCell >{row.Group}</TableCell>\r\n                <TableCell >{row.Category}</TableCell>\r\n                <TableCell >{row.Region}</TableCell>\r\n                <TableCell >{row.Cable_Status}</TableCell>\r\n                <TableCell >{row.UFR_SW}</TableCell>\r\n                <TableCell >{row.Stage_A}</TableCell>\r\n                <TableCell >{row.Stage_B}</TableCell>\r\n                <TableCell >{row.S1}</TableCell>\r\n                <TableCell >{row.S2}</TableCell>\r\n                <TableCell >{row.S3}</TableCell>\r\n                <TableCell >{row.S4}</TableCell>\r\n                <TableCell >{row.S5}</TableCell>\r\n                <TableCell >{row.S6}</TableCell>\r\n                <TableCell >{row.S7}</TableCell>\r\n                <TableCell >{row.S8}</TableCell>\r\n                <TableCell >{row.S9}</TableCell>\r\n                <TableCell >{row.S10}</TableCell>\r\n                <TableCell >{row.S11}</TableCell>\r\n                <TableCell >{row.CAP_OK_MVAR}</TableCell>\r\n                <TableCell >{row.CAP_MVAR}</TableCell>\r\n                <TableCell >{row.dataAddedName}</TableCell>\r\n                <TableCell >{new Date(row.dataAddedDateTime).toDateString()}</TableCell>\r\n                <TableCell >{row.ArchivedataAddedName}</TableCell>\r\n                <TableCell >{new Date(row.ArchiveAddedDateTime).toDateString()}</TableCell>\r\n               \r\n                        </TableRow>\r\n                    )\r\n\r\n                    )\r\n                }\r\n                </TableBody>\r\n            </TblContainer>\r\n            <TblPagination\r\n            ></TblPagination>\r\n        </Paper>\r\n    \r\n    )\r\n    }\r\n}\r\n","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\DatePicker.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Controls\\Input.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\NavBar\\Navbar.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\history.js",[],"D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\Loadshedding.js",["182","183","184","185","186","187"],"import React, { useState, useEffect } from 'react'\r\nimport LoadSheddingDataForm from './LoadSheddingForm'\r\nimport { Paper, makeStyles, TableBody, TableRow, TableCell, Toolbar, InputAdornment } from '@material-ui/core';\r\nimport UseTable from \"../UseTable\";\r\nimport { Controls } from \"../Controls/Controls\";\r\nimport { Height, Search } from '@material-ui/icons';\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Popup from \"../Popup\";\r\nimport { Snackbar, Grid } from '@material-ui/core';\r\nimport { InsertLSData, GetLoadSheddings, setExpiry, updateLSData } from \"../Api/api\"\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport EditOutlined from '@material-ui/icons/EditOutlined'\r\nimport UseForm, { Form } from \"../../Components/UseForm\";\r\nimport Footer from './Footer';\r\nimport Notifications from \"../Controls/Notifications\";\r\nconst useStyles = makeStyles(theme => ({\r\n    pageContenet: {\r\n\r\n\r\n        margin: theme.spacing(3),\r\n        padding: theme.spacing(5),\r\n        width: '95%'\r\n\r\n    },\r\n    inputControl: {\r\n\r\n\r\n\r\n        //padding : theme.spacing(5), \r\n        margin: theme.spacing(3),\r\n        width: '20%'\r\n\r\n    },\r\n    addNewbtn: {\r\n        position: 'absolute',\r\n        right: '10px'\r\n    },\r\n    Fdiv: {\r\n        // paddingTop: '130px',\r\n        // paddingLeft: '140px'\r\n    }\r\n    ,\r\n  \r\n}))\r\n\r\nconst headCells = [\r\n    { id: 'LoadSheddingSNO', label: 'SNO' },\r\n    { id: 'group', label: 'Group' },\r\n    { id: 'block', label: 'Block' },\r\n    { id: 'llFeders', label: 'LL Feeders' },\r\n    { id: 'mlFeeders', label: 'ML Feeders' },\r\n    { id: 'hlFeeders', label: 'HL Feeders' },\r\n    { id: 'vhlFeeders', label: 'VHL Feeders' },\r\n    { id: 'totalFeeders', label: 'TOTAL Feeders' },\r\n    { id: 'spell_1_to_and_From', label: 'SPELL 1 TO AND FROM' },\r\n    { id: 'spell_2_to_and_From', label: 'SPELL 2 TO AND FROM' },\r\n    { id: 'spell_3_to_and_From', label: 'SPELL 3 TO AND FROM' },\r\n    { id: 'spell_4_to_and_From', label: 'SPELL 4 TO AND FROM' },\r\n    { id: 'spell_5_to_and_From', label: 'SPELL 5 TO AND FROM' },\r\n    { id: 'spell_6_to_and_From', label: 'SPELL 6 TO AND FROM' },\r\n    { id: 'planExpiry', label: 'EXPIRY' },\r\n    { id: 'dataAddedDateTime', label: 'dataAddedDateTime' },\r\n    { id: 'dataAddedBy', label: 'dataAddedBy' },\r\n    { id: 'actions', label: 'Actions' }\r\n]\r\n\r\nconst initialFValues = {\r\n    expiryDate: new Date()\r\n}\r\nexport default function Loadshedding() {\r\n    const { values, setValues, handleChange } = UseForm(initialFValues);\r\n    const [filterfn, setFilter] = useState({ fn: LSData => { return LSData } });\r\n    const [getLSData, setLSData] = useState([]);\r\n    const [openPopup, setOpenPopup] = useState(false);\r\n    const [isUpdated, setUpdated] = useState(\"\")\r\n    const [recordForEdit, setRecordForEdit] = useState(null)\r\n    const [loading, setLoading] = useState(false);\r\n    const [notify, setNotify] = useState({\r\n        isOpen: false,\r\n        message: \"\",\r\n        type: \"\",\r\n      });\r\n    useEffect(() => {\r\n        console.log(isUpdated)\r\n        const fetchAPI = async () => {\r\n            try {\r\n                setLoading(true);\r\n                setLSData(await GetLoadSheddings());\r\n                setLoading(false);\r\n            } catch (error) {\r\n                setLoading(false);\r\n                console.log(\"Error  \" + {error})\r\n            }\r\n\r\n        }\r\n\r\n\r\n        fetchAPI();\r\n    }, [isUpdated]);\r\n    const [state, setState] = useState({\r\n        vertical: 'bottom',\r\n        horizontal: 'center',\r\n        isOpen: false,\r\n\r\n\r\n    });\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        setState({ isOpen: false });\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n\r\n        e.preventDefault();\r\n   \r\n        console.log(values);\r\n\r\n        addExpiry(values);\r\n       \r\n    }\r\n\r\n\r\n    const addExpiry = async (values) => {\r\n        setLoading(true);\r\n        let getData = await setExpiry(values.expiryDate);\r\n        console.log(getData)\r\n        if (isUpdated === \"yes\") {\r\n            setUpdated(\"yes!\")\r\n        }\r\n        else {\r\n            setUpdated(\"yes\")\r\n        }\r\n        setLoading(false);\r\n        setNotify({\r\n            isOpen: true,\r\n            message: \"Record Saved Successfull\",\r\n            type: \"success\",\r\n          });\r\n    }\r\n    const addOredit = async (values, resetForm) => {\r\n        console.log(values.MasterDataSNO)\r\n        setLoading(true);\r\n        if (values.LoadSheddingSNO === 0) {\r\n            await InsertLSData(values);\r\n\r\n        }\r\n        else {\r\n            await updateLSData(values);\r\n\r\n\r\n        }\r\n        if (isUpdated === \"yes\") {\r\n            setUpdated(\"yes!\")\r\n        }\r\n        else {\r\n            setUpdated(\"yes\")\r\n        }\r\n\r\n        setRecordForEdit(null);\r\n\r\n\r\n        setOpenPopup(false);\r\n        setLoading(false);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const hanleChange = (e) => {\r\n        const Tvalue = e.target;\r\n        console.log(e.target)\r\n        console.log(Tvalue.value == \"\")\r\n        console.log(Tvalue.value)\r\n\r\n        setFilter({\r\n            fn: LSData => {\r\n                if (Tvalue.value == \"\") {\r\n                    return LSData\r\n                }\r\n                else {\r\n\r\n                    return LSData.filter(x => x.block.includes(e.target.value))\r\n                }\r\n            }\r\n\r\n        })\r\n    }\r\n    const openInPopup = (item) => {\r\n        setRecordForEdit(item);\r\n        setOpenPopup(true);\r\n    }\r\n    const { TblContainer, TblHead, TblPagination, recordAfterPagingAndSorting } = UseTable(getLSData, headCells, getLSData.length, filterfn);\r\n    //console.log(getMasterData.length)        \r\n    const classes = useStyles();\r\n    const isTokenisAlive = localStorage.getItem(\"Token\");\r\n\r\n    if (isTokenisAlive == null || isTokenisAlive == undefined) {\r\n        console.log(\"Token is Expired\")\r\n        return (\r\n\r\n            <Snackbar open={state.isOpen} autoHideDuration={2500} onClose={handleClose} message=\"Session is Expired\" >\r\n\r\n            </Snackbar>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <>\r\n                <Paper className={classes.pageContenet}>\r\n                <Controls.LoadingControl open={loading}></Controls.LoadingControl>\r\n                    <Toolbar>\r\n                        <Controls.Input\r\n                            className={classes.inputControl}\r\n                            label=\"Block\"\r\n                            variant=\"outlined\"\r\n\r\n                            InputProps={{\r\n                                startAdornment: (<InputAdornment position=\"start\">\r\n                                    <Search></Search>\r\n                                </InputAdornment>)\r\n\r\n\r\n                            }}\r\n                            onChange={hanleChange}\r\n                        >\r\n                        </Controls.Input>\r\n                        <Controls.Input\r\n                            className={classes.inputControl}\r\n                            label=\"Group\"\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n\r\n                                startAdornment: (<InputAdornment position=\"start\">\r\n                                    <Search></Search>\r\n                                </InputAdornment>)\r\n\r\n\r\n                            }}>\r\n                        </Controls.Input>\r\n                        <Controls.Button\r\n                            variant=\"outlined\" startIcon={<AddIcon></AddIcon>} className={classes.addNewbtn}\r\n                            onClick={() => { setOpenPopup(true); setRecordForEdit(null) }}\r\n                        >Add LoasShedding\r\n        </Controls.Button>\r\n                    </Toolbar>\r\n                    <Grid container justify=\"flex-end\">\r\n\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Controls.DatePicker\r\n                                name=\"expiryDate\"\r\n                                label=\"Set Plan Expiry\"\r\n                                value={values.expiryDate}\r\n                                className={classes.expiry}\r\n                                onChange={handleChange}\r\n                            >\r\n\r\n\r\n                            </Controls.DatePicker>\r\n                            <Controls.Button\r\n                                variant=\"outlined\" startIcon={<AddIcon></AddIcon>}\r\n                                type=\"Submit\"\r\n                            >Set Plan Expiry\r\n        </Controls.Button>\r\n                        </Form>\r\n\r\n\r\n                    </Grid>\r\n\r\n\r\n                    <TblContainer>\r\n\r\n                        <TblHead ></TblHead>\r\n                        <TableBody>\r\n                            {\r\n\r\n                                getLSData.map(row => (\r\n                                    <TableRow key={row.LoadSheddingSNO}>\r\n                                        <TableCell >{row.LoadSheddingSNO}</TableCell>\r\n                                        <TableCell >{row.group}</TableCell>\r\n                                        <TableCell >{row.block}</TableCell>\r\n                                        <TableCell >{row.llFeders}</TableCell>\r\n                                        <TableCell >{row.mlFeeders}</TableCell>\r\n                                        <TableCell >{row.hlFeeders}</TableCell>\r\n                                        <TableCell >{row.vhlFeeders}</TableCell>\r\n                                        <TableCell >{row.totalFeeders}</TableCell>\r\n                                        <TableCell >{row.spell_1_to_and_From}</TableCell>\r\n                                        <TableCell >{row.spell_2_to_and_From}</TableCell>\r\n                                        <TableCell >{row.spell_3_to_and_From}</TableCell>\r\n                                        <TableCell >{row.spell_4_to_and_From}</TableCell>\r\n                                        <TableCell >{row.spell_5_to_and_From}</TableCell>\r\n                                        <TableCell >{row.spell_6_to_and_From}</TableCell>\r\n                                        <TableCell >{new Date(row.planExpiry).toDateString()}</TableCell>\r\n                                        <TableCell >{new Date(row.dataAddedDateTime).toDateString()}</TableCell>\r\n                                        <TableCell >{row.dataAddedBy}</TableCell>\r\n                                        <TableCell>\r\n                                            <Controls.ActionButton color=\"primary\">\r\n                                                <EditOutlined fontSize=\"small\" onClick={() => { openInPopup(row); console.log(row); }}></EditOutlined>\r\n                                            </Controls.ActionButton>\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            <Controls.ActionButton color=\"secondary\">\r\n                                                <CloseIcon fontSize=\"small\"></CloseIcon>\r\n                                            </Controls.ActionButton>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )\r\n\r\n                                )\r\n                            }\r\n                        </TableBody>\r\n                    </TblContainer>\r\n                    <TblPagination\r\n                    ></TblPagination>\r\n\r\n                </Paper>\r\n                <Footer></Footer>\r\n                <Popup\r\n                    openPopup={openPopup}\r\n                    setopenPopup={setOpenPopup}\r\n                    title=\"Shutdown Form\">\r\n                    <LoadSheddingDataForm update={\"yes\"} addOrEdit={addOredit} recordForEdit={recordForEdit}></LoadSheddingDataForm>\r\n                </Popup>\r\n                <Notifications notify={notify} setNotify={setNotify}></Notifications>\r\n            </>\r\n        )\r\n\r\n    }\r\n}\r\n","D:\\Moiz\\Development\\React\\LDCFrontEnd\\src\\Components\\Pages\\LoadSheddingForm.js",["188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211"],"import React, { useEffect, useState } from \"react\";\r\nimport { Controls } from \"../../Components/Controls/Controls\";\r\nimport UseForm, { Form } from \"../../Components/UseForm\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\nimport { getAllBlocks, getGroups, getCategory } from \"../Api/api\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  inputControl: {\r\n    \"& .MuiOutlinedInput-root\": {\r\n      margin: \"0px 5px\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst initialFValues = {\r\n  LoadSheddingSNO: 0,\r\n  group: \"\",\r\n  block: \"\",\r\n  llFeders: 0,\r\n  mlFeeders: 0,\r\n  hlFeeders: 0,\r\n  vhlFeeders: 0,\r\n\r\n  totalFeeders: 0,\r\n  spell_1_to_and_From: \"\",\r\n  spell_2_to_and_From: \"\",\r\n  spell_3_to_and_From: \"\",\r\n  spell_4_to_and_From: \"\",\r\n  spell_5_to_and_From: \"\",\r\n  spell_6_to_and_From: \"\",\r\n};\r\nexport default function LoadSheddingForm(props) {\r\n  const classes = useStyles();\r\n  const { update, addOrEdit, recordForEdit } = props;\r\n  const { values, setValues, handleChange } = UseForm(initialFValues);\r\n  const [block, setBlock] = useState();\r\n  const [group, setgroup] = useState();\r\n  const [getBlock, setGetBlock] = useState();\r\n  const [getGroup, setgetGroup] = useState();\r\n  const [category, setCategory] = useState();\r\n \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(values);\r\n    addOrEdit(values);\r\n  };\r\n\r\n  console.log(update);\r\n  console.log(\"LS Form Called\");\r\n\r\n  useEffect(() => {\r\n    if (recordForEdit != null) {\r\n      setValues({ ...recordForEdit });\r\n    }\r\n  }, [recordForEdit]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Calling fetchAPi from LSForm\");\r\n    const fetchAPI = async () => {\r\n      try {\r\n        console.log(values.block);\r\n        setBlock(await getAllBlocks());\r\n      } catch (error) {\r\n        console.log(`Error ${error}`);\r\n      }\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Calling get Group  UseEffect from LSForm\");\r\n    const setBlock = () => {\r\n      try {\r\n        console.log(values.block);\r\n\r\n        // if ( values.block == \"\") {\r\n        //     console.log(getBlock)\r\n        // }\r\n        // else {\r\n        setGetBlock(values.block);\r\n        //     console.log(getBlock)\r\n        // }\r\n      } catch (error) {\r\n        console.log(`Error ${error}`);\r\n      }\r\n    };\r\n\r\n    setBlock();\r\n  }, [handleChange]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Calling getGroup from LSForm\");\r\n    const fetchAPI = async () => {\r\n      try {\r\n        console.log(values.block);\r\n        if (values.block == \"\") {\r\n          console.log(\"value is none,\");\r\n          setgroup(\"\");\r\n        } else {\r\n          setgroup(await getGroups(values.block));\r\n        }\r\n      } catch (error) {\r\n        console.log(`Error ${error}`);\r\n      }\r\n    };\r\n\r\n    fetchAPI();\r\n  }, [getBlock]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Calling Set Group  UseEffect from LSForm\");\r\n    const setGrp = () => {\r\n      try {\r\n        console.log(values.group);\r\n\r\n        // if ( values.block == \"\") {\r\n        //     console.log(getBlock)\r\n        // }\r\n        // else {\r\n        setgetGroup(values.group);\r\n        //     console.log(getBlock)\r\n        // }\r\n      } catch (error) {\r\n        console.log(`Error ${error}`);\r\n      }\r\n    };\r\n\r\n    setGrp();\r\n  }, [handleChange]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Calling getCategory from LSForm\");\r\n    const fetchAPI = async () => {\r\n      try {\r\n        console.log(values.block, values.group);\r\n\r\n        setCategory(await getCategory(values.block, values.group));\r\n        console.log(category);\r\n        category.map((data) => {\r\n          if (data.categoryName == \"LL\") {\r\n            console.log(\"LL Feeders matched \" + data.categoryCount);\r\n            values.llFeders = data.categoryCount;\r\n          }\r\n\r\n          if (data.categoryName == \"ML\") {\r\n            console.log(\"ML Feeders matched \" + data.categoryCount);\r\n            values.mlFeeders = data.categoryCount;\r\n          }\r\n          if (data.categoryName == \"HL\") {\r\n            console.log(\"HL Feeders matched \" + data.categoryCount);\r\n            values.hlFeeders = data.categoryCount;\r\n          }\r\n\r\n          if (data.categoryName == \"VHL\") {\r\n            console.log(\"VL Feeders matched \" + data.categoryCount);\r\n            values.vhlFeedersFeeders = data.categoryCount;\r\n          }\r\n        });\r\n        setValues({ ...values });\r\n        console.log(`setting values ${values}`);\r\n      } catch (error) {\r\n        console.log(`Error ${error}`);\r\n      }\r\n    };\r\n\r\n    fetchAPI();\r\n  }, [getGroup]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Calling sET Category from LSForm\");\r\n    const fetchAPI = async () => {\r\n      try {\r\n        console.log(category);\r\n        category.map((data) => {\r\n          if (data.categoryName == \"LL\") {\r\n            console.log(\"LL Feeders matched \" + data.categoryCount);\r\n            values.llFeeders = data.categoryCount;\r\n          } else {\r\n            values.llFeeders = 0;\r\n          }\r\n\r\n          if (data.categoryName == \"ML\") {\r\n            console.log(\"ML Feeders matched \" + data.categoryCount);\r\n            values.mlFeeders = data.categoryCount;\r\n          } else {\r\n            values.mlFeeders = 0;\r\n          }\r\n          if (data.categoryName == \"HL\") {\r\n            console.log(\"HL Feeders matched \" + data.categoryCount);\r\n            values.hlFeeders = data.categoryCount;\r\n          } else {\r\n            values.hlFeeders = 0;\r\n          }\r\n\r\n          if (data.categoryName == \"VHL\") {\r\n            console.log(\"VL Feeders matched \" + data.categoryCount);\r\n            values.vhlFeeders = data.categoryCount;\r\n          } else {\r\n            values.vhlFeeders = 0;\r\n          }\r\n        });\r\n        setValues({ ...values });\r\n        console.log(`setting values ${values}`);\r\n      } catch (error) {\r\n        console.log(`Error ${error}`);\r\n      }\r\n    };\r\n\r\n    fetchAPI();\r\n  }, [category]);\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Grid>\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <Controls.Select\r\n              name=\"block\"\r\n              label=\"Select Block\"\r\n              value={values.block}\r\n              onChange={handleChange}\r\n              options={block}\r\n              className={classes.inputControl}\r\n            />\r\n\r\n            <Controls.Input\r\n              variant=\"outlined\"\r\n              value={values.llFeders}\r\n              name=\"llFeders\"\r\n              label=\"LL Feeders\"\r\n              type=\"text\"\r\n              size=\"medium\"\r\n              placeholder=\"\"\r\n              margin=\"normal\"\r\n              id=\"llFeeders\"\r\n              Inputprops={{ tabIndex: \"1\" }}\r\n              disabled\r\n              className={classes.inputControl}\r\n            />\r\n            <Controls.Input\r\n              variant=\"outlined\"\r\n              value={values.hlFeeders}\r\n              name=\"hlFeeders\"\r\n              label=\"HL Feeders\"\r\n              type=\"text\"\r\n              size=\"medium\"\r\n              placeholder=\"\"\r\n              margin=\"normal\"\r\n              id=\"hlFeeders\"\r\n              className={classes.inputControl}\r\n              Inputprops={{ tabIndex: \"1\" }}\r\n              disabled\r\n            />\r\n\r\n            <Controls.Input\r\n              variant=\"outlined\"\r\n              value={values.spell_1_to_and_From}\r\n              name=\"spell_1_to_and_From\"\r\n              label=\"SPELL 1 TO AND FROM\"\r\n              type=\"text\"\r\n              size=\"medium\"\r\n              placeholder=\"\"\r\n              margin=\"normal\"\r\n              placeholder=\"SPELL 1 TO AND FROM\"\r\n              id=\"spell_1_to_and_From\"\r\n              onChange={handleChange}\r\n              Inputprops={{ tabIndex: \"1\" }}\r\n              className={classes.inputControl}\r\n            />\r\n\r\n            <Controls.Input\r\n              variant=\"outlined\"\r\n              value={values.spell_3_to_and_From}\r\n              name=\"spell_3_to_and_From\"\r\n              label=\"SPELL 3 TO AND FROM\"\r\n              type=\"text\"\r\n              size=\"medium\"\r\n              placeholder=\"\"\r\n              margin=\"normal\"\r\n              placeholder=\"SPELL 3 TO AND FROM\"\r\n              id=\"spell_3_to_and_From\"\r\n              onChange={handleChange}\r\n              Inputprops={{ tabIndex: \"1\" }}\r\n              className={classes.inputControl}\r\n            />\r\n            <Controls.Input\r\n              variant=\"outlined\"\r\n              value={values.spell_5_to_and_From}\r\n              name=\"spell_5_to_and_From\"\r\n              label=\"SPELL 5 TO AND FROM\"\r\n              type=\"text\"\r\n              size=\"medium\"\r\n              placeholder=\"\"\r\n              margin=\"normal\"\r\n              placeholder=\"SPELL 5 TO AND FROM\"\r\n              className={classes.inputControl}\r\n              id=\"spell_5_to_and_From\"\r\n              onChange={handleChange}\r\n              Inputprops={{ tabIndex: \"1\" }}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={6}>\r\n            <Controls.Select\r\n              name=\"group\"\r\n              label=\"Select Group\"\r\n              value={values.group}\r\n              onChange={handleChange}\r\n              options={group}\r\n              className={classes.inputControl}\r\n            />\r\n            <Controls.Input\r\n              variant=\"outlined\"\r\n              value={values.mlFeeders}\r\n              name=\"mlFeeders\"\r\n              label=\"ML Feeders\"\r\n              type=\"text\"\r\n              size=\"medium\"\r\n              placeholder=\"\"\r\n              margin=\"normal\"\r\n              id=\"mlFeeders\"\r\n              Inputprops={{ tabIndex: \"2\" }}\r\n              disabled\r\n              className={classes.inputControl}\r\n            />{\" \"}\r\n            <Controls.Input\r\n              variant=\"outlined\"\r\n              value={values.vhlFeeders}\r\n              name=\"vhlFeeders\"\r\n              label=\"VHL Feeders\"\r\n              type=\"text\"\r\n              size=\"medium\"\r\n              placeholder=\"\"\r\n              margin=\"normal\"\r\n              id=\"vhlFeeders\"\r\n              Inputprops={{ tabIndex: \"2\" }}\r\n              disabled\r\n              className={classes.inputControl}\r\n            />\r\n            <Controls.Input\r\n              variant=\"outlined\"\r\n              value={values.spell_2_to_and_From}\r\n              name=\"spell_2_to_and_From\"\r\n              label=\"SPELL 2 TO AND FROM\"\r\n              type=\"text\"\r\n              size=\"medium\"\r\n              placeholder=\"\"\r\n              margin=\"normal\"\r\n              placeholder=\"SPELL 2 TO AND FROM\"\r\n              id=\"spell_2_to_and_From\"\r\n              onChange={handleChange}\r\n              Inputprops={{ tabIndex: \"1\" }}\r\n              className={classes.inputControl}\r\n            />\r\n            <Controls.Input\r\n              variant=\"outlined\"\r\n              value={values.spell_4_to_and_From}\r\n              name=\"spell_4_to_and_From\"\r\n              label=\"SPELL 4 TO AND FROM\"\r\n              type=\"text\"\r\n              size=\"medium\"\r\n              placeholder=\"\"\r\n              margin=\"normal\"\r\n              placeholder=\"SPELL 4 TO AND FROM\"\r\n              id=\"spell_4_to_and_From\"\r\n              onChange={handleChange}\r\n              Inputprops={{ tabIndex: \"1\" }}\r\n              className={classes.inputControl}\r\n            />\r\n            <Controls.Input\r\n              variant=\"outlined\"\r\n              value={values.spell_6_to_and_From}\r\n              name=\"spell_6_to_and_From\"\r\n              label=\"SPELL 6 TO AND FROM\"\r\n              type=\"text\"\r\n              size=\"medium\"\r\n              placeholder=\"\"\r\n              margin=\"normal\"\r\n              placeholder=\"SPELL 6 TO AND FROM\"\r\n              id=\"spell_6_to_and_From\"\r\n              onChange={handleChange}\r\n              Inputprops={{ tabIndex: \"1\" }}\r\n              className={classes.inputControl}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container justify=\"flex-end\" spacing={1}>\r\n        <hr></hr>{\" \"}\r\n        <div>\r\n          <Controls.Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            // className={classes.submit}\r\n            disabled={false}\r\n            inputprops={{ tabIndex: \"30\" }}\r\n          >\r\n            Submit\r\n          </Controls.Button>\r\n\r\n          <Controls.Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            // className={classes.submit}\r\n            disabled={false}\r\n            inputprops={{ tabIndex: \"31\" }}\r\n          >\r\n            Reset\r\n          </Controls.Button>\r\n        </div>\r\n      </Grid>\r\n    </Form>\r\n  );\r\n}\r\n",{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":2,"column":11,"nodeType":"218","messageId":"219","endLine":2,"endColumn":16},{"ruleId":"216","severity":1,"message":"220","line":2,"column":33,"nodeType":"218","messageId":"219","endLine":2,"endColumn":38},{"ruleId":"216","severity":1,"message":"221","line":3,"column":31,"nodeType":"218","messageId":"219","endLine":3,"endColumn":40},{"ruleId":"216","severity":1,"message":"222","line":3,"column":42,"nodeType":"218","messageId":"219","endLine":3,"endColumn":48},{"ruleId":"216","severity":1,"message":"223","line":3,"column":50,"nodeType":"218","messageId":"219","endLine":3,"endColumn":54},{"ruleId":"216","severity":1,"message":"224","line":3,"column":56,"nodeType":"218","messageId":"219","endLine":3,"endColumn":59},{"ruleId":"216","severity":1,"message":"225","line":3,"column":8,"nodeType":"218","messageId":"219","endLine":3,"endColumn":25},{"ruleId":"226","severity":1,"message":"227","line":162,"column":6,"nodeType":"228","endLine":162,"endColumn":17,"suggestions":"229"},{"ruleId":"216","severity":1,"message":"230","line":167,"column":9,"nodeType":"218","messageId":"219","endLine":167,"endColumn":13},{"ruleId":"231","severity":1,"message":"232","line":196,"column":22,"nodeType":"233","messageId":"234","endLine":196,"endColumn":24},{"ruleId":"231","severity":1,"message":"232","line":291,"column":30,"nodeType":"233","messageId":"234","endLine":291,"endColumn":32},{"ruleId":"231","severity":1,"message":"232","line":296,"column":26,"nodeType":"233","messageId":"234","endLine":296,"endColumn":28},{"ruleId":"231","severity":1,"message":"232","line":325,"column":48,"nodeType":"233","messageId":"234","endLine":325,"endColumn":50},{"ruleId":"216","severity":1,"message":"235","line":2,"column":8,"nodeType":"218","messageId":"219","endLine":2,"endColumn":14},{"ruleId":"226","severity":1,"message":"236","line":49,"column":8,"nodeType":"228","endLine":49,"endColumn":23,"suggestions":"237"},{"ruleId":"216","severity":1,"message":"238","line":1,"column":17,"nodeType":"218","messageId":"219","endLine":1,"endColumn":26},{"ruleId":"216","severity":1,"message":"239","line":1,"column":26,"nodeType":"218","messageId":"219","endLine":1,"endColumn":35},{"ruleId":"216","severity":1,"message":"240","line":57,"column":23,"nodeType":"218","messageId":"219","endLine":57,"endColumn":32},{"ruleId":"216","severity":1,"message":"241","line":60,"column":12,"nodeType":"218","messageId":"219","endLine":60,"endColumn":25},{"ruleId":"216","severity":1,"message":"242","line":93,"column":13,"nodeType":"218","messageId":"219","endLine":93,"endColumn":25},{"ruleId":"216","severity":1,"message":"243","line":102,"column":13,"nodeType":"218","messageId":"219","endLine":102,"endColumn":22},{"ruleId":"231","severity":1,"message":"232","line":132,"column":34,"nodeType":"233","messageId":"234","endLine":132,"endColumn":36},{"ruleId":"231","severity":1,"message":"232","line":137,"column":33,"nodeType":"233","messageId":"234","endLine":137,"endColumn":35},{"ruleId":"216","severity":1,"message":"244","line":153,"column":48,"nodeType":"218","messageId":"219","endLine":153,"endColumn":75},{"ruleId":"231","severity":1,"message":"232","line":157,"column":49,"nodeType":"233","messageId":"234","endLine":157,"endColumn":51},{"ruleId":"216","severity":1,"message":"245","line":62,"column":22,"nodeType":"218","messageId":"219","endLine":62,"endColumn":31},{"ruleId":"226","severity":1,"message":"246","line":94,"column":8,"nodeType":"228","endLine":94,"endColumn":10,"suggestions":"247"},{"ruleId":"231","severity":1,"message":"232","line":109,"column":50,"nodeType":"233","messageId":"234","endLine":109,"endColumn":52},{"ruleId":"216","severity":1,"message":"248","line":1,"column":8,"nodeType":"218","messageId":"219","endLine":1,"endColumn":13},{"ruleId":"226","severity":1,"message":"236","line":46,"column":8,"nodeType":"228","endLine":46,"endColumn":23,"suggestions":"249"},{"ruleId":"216","severity":1,"message":"250","line":2,"column":69,"nodeType":"218","messageId":"219","endLine":2,"endColumn":83},{"ruleId":"216","severity":1,"message":"245","line":77,"column":26,"nodeType":"218","messageId":"219","endLine":77,"endColumn":35},{"ruleId":"226","severity":1,"message":"227","line":109,"column":11,"nodeType":"228","endLine":109,"endColumn":13,"suggestions":"251"},{"ruleId":"231","severity":1,"message":"232","line":124,"column":53,"nodeType":"233","messageId":"234","endLine":124,"endColumn":55},{"ruleId":"216","severity":1,"message":"252","line":6,"column":10,"nodeType":"218","messageId":"219","endLine":6,"endColumn":16},{"ruleId":"216","severity":1,"message":"253","line":71,"column":21,"nodeType":"218","messageId":"219","endLine":71,"endColumn":30},{"ruleId":"231","severity":1,"message":"232","line":177,"column":34,"nodeType":"233","messageId":"234","endLine":177,"endColumn":36},{"ruleId":"231","severity":1,"message":"232","line":182,"column":34,"nodeType":"233","messageId":"234","endLine":182,"endColumn":36},{"ruleId":"216","severity":1,"message":"244","line":197,"column":51,"nodeType":"218","messageId":"219","endLine":197,"endColumn":78},{"ruleId":"231","severity":1,"message":"232","line":202,"column":50,"nodeType":"233","messageId":"234","endLine":202,"endColumn":52},{"ruleId":"226","severity":1,"message":"236","line":54,"column":6,"nodeType":"228","endLine":54,"endColumn":21,"suggestions":"254"},{"ruleId":"226","severity":1,"message":"255","line":68,"column":6,"nodeType":"228","endLine":68,"endColumn":8,"suggestions":"256"},{"ruleId":"226","severity":1,"message":"255","line":89,"column":6,"nodeType":"228","endLine":89,"endColumn":20,"suggestions":"257"},{"ruleId":"231","severity":1,"message":"232","line":96,"column":26,"nodeType":"233","messageId":"234","endLine":96,"endColumn":28},{"ruleId":"226","severity":1,"message":"255","line":108,"column":6,"nodeType":"228","endLine":108,"endColumn":16,"suggestions":"258"},{"ruleId":"226","severity":1,"message":"259","line":129,"column":6,"nodeType":"228","endLine":129,"endColumn":20,"suggestions":"260"},{"ruleId":"261","severity":1,"message":"262","line":139,"column":29,"nodeType":"263","messageId":"264","endLine":139,"endColumn":31},{"ruleId":"231","severity":1,"message":"232","line":140,"column":33,"nodeType":"233","messageId":"234","endLine":140,"endColumn":35},{"ruleId":"231","severity":1,"message":"232","line":145,"column":33,"nodeType":"233","messageId":"234","endLine":145,"endColumn":35},{"ruleId":"231","severity":1,"message":"232","line":149,"column":33,"nodeType":"233","messageId":"234","endLine":149,"endColumn":35},{"ruleId":"231","severity":1,"message":"232","line":154,"column":33,"nodeType":"233","messageId":"234","endLine":154,"endColumn":35},{"ruleId":"226","severity":1,"message":"265","line":167,"column":6,"nodeType":"228","endLine":167,"endColumn":16,"suggestions":"266"},{"ruleId":"261","severity":1,"message":"262","line":174,"column":29,"nodeType":"263","messageId":"264","endLine":174,"endColumn":31},{"ruleId":"231","severity":1,"message":"232","line":175,"column":33,"nodeType":"233","messageId":"234","endLine":175,"endColumn":35},{"ruleId":"231","severity":1,"message":"232","line":182,"column":33,"nodeType":"233","messageId":"234","endLine":182,"endColumn":35},{"ruleId":"231","severity":1,"message":"232","line":188,"column":33,"nodeType":"233","messageId":"234","endLine":188,"endColumn":35},{"ruleId":"231","severity":1,"message":"232","line":195,"column":33,"nodeType":"233","messageId":"234","endLine":195,"endColumn":35},{"ruleId":"226","severity":1,"message":"267","line":210,"column":6,"nodeType":"228","endLine":210,"endColumn":16,"suggestions":"268"},{"ruleId":"269","severity":1,"message":"270","line":264,"column":15,"nodeType":"271","endLine":264,"endColumn":48},{"ruleId":"269","severity":1,"message":"270","line":280,"column":15,"nodeType":"271","endLine":280,"endColumn":48},{"ruleId":"269","severity":1,"message":"270","line":295,"column":15,"nodeType":"271","endLine":295,"endColumn":48},{"ruleId":"269","severity":1,"message":"270","line":349,"column":15,"nodeType":"271","endLine":349,"endColumn":48},{"ruleId":"269","severity":1,"message":"270","line":364,"column":15,"nodeType":"271","endLine":364,"endColumn":48},{"ruleId":"269","severity":1,"message":"270","line":379,"column":15,"nodeType":"271","endLine":379,"endColumn":48},"no-native-reassign",["272"],"no-negated-in-lhs",["273"],"no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'Alert' is defined but never used.","'TextField' is defined but never used.","'Button' is defined but never used.","'Link' is defined but never used.","'Box' is defined but never used.","'PeopleOutlineIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMasterData'. Either include it or remove the dependency array.","ArrayExpression",["274"],"'name' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'NavBar' is defined but never used.","React Hook useEffect has a missing dependency: 'setValues'. Either include it or remove the dependency array.",["275"],"'TableBody' is defined but never used.","'useEffect' is defined but never used.","'setLSData' is assigned a value but never used.","'recordForEdit' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'addOredit' is assigned a value but never used.","'recordAfterPagingAndSorting' is assigned a value but never used.","'setFilter' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getLSData'. Either include it or remove the dependency array.",["276"],"'React' is defined but never used.",["277"],"'InputAdornment' is defined but never used.",["278"],"'Height' is defined but never used.","'setValues' is assigned a value but never used.",["279"],"React Hook useEffect has a missing dependency: 'values.block'. Either include it or remove the dependency array.",["280"],["281"],["282"],"React Hook useEffect has a missing dependency: 'values.group'. Either include it or remove the dependency array.",["283"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'category', 'setValues', and 'values'. Either include them or remove the dependency array.",["284"],"React Hook useEffect has missing dependencies: 'setValues' and 'values'. Either include them or remove the dependency array.",["285"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"288","fix":"292"},{"desc":"293","fix":"294"},{"desc":"288","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},"Update the dependencies array to be: [getMasterData, isUpdated]",{"range":"308","text":"309"},"Update the dependencies array to be: [recordForEdit, setValues]",{"range":"310","text":"311"},"Update the dependencies array to be: [getLSData]",{"range":"312","text":"313"},{"range":"314","text":"311"},"Update the dependencies array to be: [getMasterData]",{"range":"315","text":"316"},{"range":"317","text":"311"},"Update the dependencies array to be: [values.block]",{"range":"318","text":"319"},"Update the dependencies array to be: [handleChange, values.block]",{"range":"320","text":"321"},"Update the dependencies array to be: [getBlock, values.block]",{"range":"322","text":"323"},"Update the dependencies array to be: [handleChange, values.group]",{"range":"324","text":"325"},"Update the dependencies array to be: [category, getGroup, setValues, values]",{"range":"326","text":"327"},"Update the dependencies array to be: [category, setValues, values]",{"range":"328","text":"329"},[4615,4626],"[getMasterData, isUpdated]",[1274,1289],"[recordForEdit, setValues]",[3015,3017],"[getLSData]",[1108,1123],[3893,3895],"[getMasterData]",[1503,1518],[1827,1829],"[values.block]",[2303,2317],"[handleChange, values.block]",[2768,2778],"[getBlock, values.block]",[3248,3262],"[handleChange, values.group]",[4510,4520],"[category, getGroup, setValues, values]",[5863,5873],"[category, setValues, values]"]